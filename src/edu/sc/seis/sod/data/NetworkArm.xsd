<?xml version="1.0"?>

<xsd:schema targetNamespace="http://www.seis.sc.edu/xschema/sod/1.0"
xmlns="http://www.seis.sc.edu/xschema/sod/1.0"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema">

<!--
    <xsd:annotation>
        <xsd:documentation xml:lang="en">
            Schema for the NetworkArm of SOD
        </xsd:documentation>
    </xsd:annotation>
-->

    <!-- Include the external schemas necessary for this schema -->
   <xsd:include schemaLocation="utilities.xsd"/>

    <!-- ABSTRACT TYPE DECLARATIONS -->

    <!--  abstractType networkSource -->
    <xsd:complexType name="networkSource" abstract="true">
        <xsd:complexContent>
            <xsd:extension base="sourceType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- abstractType networkID -->
    <xsd:complexType name="networkIDType" abstract="true">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Abstract superclass of all NetworkId subsetters.
                </summary>
                <description>
                    This is a place holder for NetworkId subsetters. See the
                    list of known subclasses for subsetters that can be used.
                </description>
                <example>

                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!--abstractType networkAttr -->
    <xsd:complexType name="networkAttrType" abstract="true">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Abstract superclass of all NetworkAttr subsetters.
                </summary>
                <description>
                    This is a place holder for NetworkAttr subsetters. See the
                    list of known subclasses for subsetters that can be used.
                </description>
                <example>

                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- abstractType stationID -->
    <xsd:complexType name="stationIDType" abstract="true">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Abstract superclass of all StationId subsetters.
                </summary>
                <description>
                    This is a place holder for StationId subsetters. See the
                    list of known subclasses for subsetters that can be used.
                </description>
                <example>

                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- abstractType station -->
    <xsd:complexType name="stationType" abstract="true">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Abstract superclass of all Station subsetters.
                </summary>
                <description>
                    This is a place holder for Station subsetters. See the
                    list of known subclasses for subsetters that can be used.
                </description>
                <example>

                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- abstractType siteID -->
    <xsd:complexType name="siteIDType" abstract="true">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Abstract superclass of all SiteId subsetters.
                </summary>
                <description>
                    This is a place holder for SiteId subsetters. See the
                    list of known subclasses for subsetters that can be used.
                </description>
                <example>

                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!--abstracType site -->
    <xsd:complexType name="siteType" abstract="true">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Abstract superclass of all SiteId subsetters.
                </summary>
                <description>
                    This is a place holder for Site subsetters. See the
                    list of known subclasses for subsetters that can be used.
                </description>
                <example>

                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- abstractType channelID -->
    <xsd:complexType name="channelIDType" abstract="true">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Abstract superclass of all ChannelId subsetters.
                </summary>
                <description>
                    This is a place holder for ChannelId subsetters. See the
                    list of known subclasses for subsetters that can be used.
                </description>
                <example>

                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- abstractType channel -->
    <xsd:complexType name="channelType" abstract="true">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Abstract superclass of all Channel subsetters.
                </summary>
                <description>
                    This is a place holder for Channel subsetters. See the
                    list of known subclasses for subsetters that can be used.
                </description>
                <example>

                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>



    <xsd:complexType name="networkFinderType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Finds networks.
                </summary>
                <description>
                    A Fissures/DHI NetworkDC service is located via the name
                    and dns tags. The NetworkFinder is aquired from the NetworkDC,
                    and a query is sent with the given arguments. The networks
                    returned are then sent thrrough the NetworkArm for processing.
                    An optional refresh interval can be given if sod should
                    periodically check for new channels.
                </description>
                <example>
                    <networkFinder>
                        <description>Connect to the IRIS networkDC</description>
                        <name>IRIS_NetworkDC</name>
                        <dns>edu/iris/dmc</dns>
                        <refreshInterval>
                            <unit>MINUTE</unit>
                            <value>3000</value>
                        </refreshInterval>
                    </networkFinder>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkSource">
                <xsd:sequence>
                    <xsd:element ref="refreshInterval" minOccurs = "0" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- NETWORK CODE TYPE -->
    <xsd:complexType name="networkCodeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches a given network code.
                </summary>
                <description>
                    A network is accepted if its network code matches the given
                    code exactly.
                </description>
                <example>
                    <networkCode><value>IC</value></networkCode>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkIDType">
                <xsd:sequence>
                    <xsd:element name="value" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- NETWORKID AND TYPE -->
    <xsd:complexType name="networkIDANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between networkId subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <networkIdAND>
                        <networkCode><value>IC</value></networkCode>
                        <networkCode><value>IC</value></networkCode>
                    </networkIdAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkIDType">
                <xsd:sequence>
                    <xsd:element ref="networkID" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- NETWORKID OR TYPE -->
    <xsd:complexType name="networkIDORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between networkId subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. If the first subsetters returns
                    true then the second is not evaluated.
                </description>
                <example>
                    <networkIdOR>
                        <networkCode><value>CD</value></networkCode>
                        <networkCode><value>IC</value></networkCode>
                    </networkIdOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkIDType">
                <xsd:sequence>
                    <xsd:element ref="networkID" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- NETWORKID XOR TYPE -->
    <xsd:complexType name="networkIDXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between networkId subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of all
                    included subsetters.
                </description>
                <example>
                    <networkIdXOR>
                        <networkCode><value>CD</value></networkCode>
                        <networkCode><value>IC</value></networkCode>
                    </networkIdXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkIDType">
                <xsd:sequence>
                    <xsd:element ref="networkID" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- NETWORKID NOT TYPE -->
    <xsd:complexType name="networkIDNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of an networkId subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of the
                    included subsetter.
                </description>
                <example>
                    <networkIdNOT>
                        <networkCode><value>CD</value></networkCode>
                    </networkIdNOT>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkIDType">
                <xsd:sequence>
                    <xsd:element ref="networkID" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- NETWORK EFFECTIVE TIME OVERLAP TYPE -->
    <xsd:complexType name="networkEffectiveTimeOverlapType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches if the network overlaps the given time range.
                </summary>
                <description>
                    Matches if the network overlaps the given time range.
                </description>
                <example>
                    <networkEffectiveTimeOverlap>
                        <description>
                            Make sure the network was up during the time range we
                            are interested in.
                        </description>
                        <effectiveTimeOverlap>
                            <min>20020701T00:00:00.001Z</min>
                            <max>20021030T00:00:00.001Z</max>
                        </effectiveTimeOverlap>
                    </networkEffectiveTimeOverlap>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkAttrType">
                <xsd:sequence>
                    <xsd:element name="effectiveTimeOverlap" type="effectiveTimeOverlapType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="networkAttrNameType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches the name of a network.
                </summary>
                <description>
                    Matches the name of a network.
                </description>
                <example>
                    <networkAttrName>
                        <value>Global Seismograph Network (GSN - IRIS/USGS)</value>
                    </networkAttrName>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkAttrType">
                <xsd:sequence>
                    <xsd:element name="value" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="networkAttrOwnerType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches the owner of a network.
                </summary>
                <description>
                    Matches the owner of a network. This is a simple string
                    comparision, and so care must be taken for it to be useful.
                </description>
                <example>
                    <networkAttrOwner>
                        <value>Scripps Institution of Oceanography</value>
                    </networkAttrOwner>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkAttrType">
                <xsd:sequence>
                    <xsd:element name="value" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="networkAttrANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between networkAttr subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <networkAttrAND>
                        <networkAttrOwner>
                            <value>Scripps Institution of Oceanography</value>
                        </networkAttrOwner>
                        <networkEffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </networkEffectiveTimeOverlap>
                    </networkAttrAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkAttrType">
                <xsd:sequence>
                    <xsd:element ref="networkAttr" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="networkAttrORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between networkAttr subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. If the first subsetters returns
                    true then the second is not evaluated.
                </description>
                <example>
                    <networkAttrOR>
                        <networkAttrOwner>
                            <value>Scripps Institution of Oceanography</value>
                        </networkAttrOwner>
                        <networkEffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </networkEffectiveTimeOverlap>
                    </networkAttrOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkAttrType">
                <xsd:sequence>
                    <xsd:element ref="networkAttr" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="networkAttrXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between networkAttr subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of all
                    included subsetters.
                </description>
                <example>
                    <networkAttrXOR>
                        <networkAttrOwner>
                            <value>Scripps Institution of Oceanography</value>
                        </networkAttrOwner>
                        <networkEffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </networkEffectiveTimeOverlap>
                    </networkAttrXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkAttrType">
                <xsd:sequence>
                    <xsd:element ref="networkAttr" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="networkAttrNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of an networkAttr subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of the
                    included subsetter.
                </description>
                <example>
                    <networkAttrNOT>
                        <networkAttrOwner>
                            <value>Scripps Institution of Oceanography</value>
                        </networkAttrOwner>
                    </networkAttrNOT>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="networkAttrType">
                <xsd:sequence>
                    <xsd:element ref="networkAttr" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="stationCodeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches a station code.
                </summary>
                <description>
                    Matches a station code. This is a simple string match.
                </description>
                <example>
                    <stationCode>ANMO</stationCode>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationIDType">
                <xsd:sequence>
                    <xsd:element name="value" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="stationIDANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between StationId subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <stationIDAND>
                        <stationCode><value>ANMO</value></stationCode>
                        <stationCode><value>ANMO</value></stationCode>
                    </stationIDAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationIDType">
                <xsd:sequence>
                    <xsd:element ref="stationID" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--STATIONID OR TYPE-->
    <xsd:complexType name="stationIDORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between stationId subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. If the first subsetters returns
                    true then the second is not evaluated.
                </description>
                <example>
                    <stationIDOR>
                        <stationCode><value>ANMO</value></stationCode>
                        <stationCode><value>SNZO</value></stationCode>
                    </stationIDOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationIDType">
                <xsd:sequence>
                    <xsd:element ref="stationID" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--STATIONID XOR TYPE-->
    <xsd:complexType name="stationIDXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between stationId subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of all
                    included subsetters.
                </description>
                <example>
                    <stationIDXOR>
                        <stationCode><value>ANMO</value></stationCode>
                        <stationCode><value>SNZO</value></stationCode>
                    </stationIDXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationIDType">
                <xsd:sequence>
                    <xsd:element ref="stationID" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--STATIONID NOT TYPE-->
    <xsd:complexType name="stationIDNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of an stationId subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of the
                    included subsetter.
                </description>
                <example>
                    <stationIDNOT>
                        <stationCode><value>ANMO</value></stationCode>
                    </stationIDNOT>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationIDType">
                <xsd:sequence>
                    <xsd:element ref="stationID" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!-- STATION NAME TYPE -->
    <xsd:complexType name="stationNameType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches the name of a station.
                </summary>
                <description>
                    Matches the name of a station. This is a simple string
                    comparison, and so care must be taken for this to be useful.
                </description>
                <example>
                    <stationName>
                        <value>South Karori, New Zealand</value>
                    </stationName>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationType">
                <xsd:sequence>
                    <xsd:element name="value" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- STATION OPERATOR TYPE -->
    <xsd:complexType name="stationOperatorType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches the operator of a station.
                </summary>
                <description>
                    Matches the operator of a station. This is a simple string
                    comparison, and so care must be taken for this to be useful.
                </description>
                <example>
                    <stationOperator>
                        <value>Joe Seismologist</value>
                    </stationOperator>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationType">
                <xsd:sequence>
                    <xsd:element name="value" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- STATION DEPTH RANGE TYPE -->
    <xsd:complexType name="stationDepthRangeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches stations at a range of depths below the surface.
                </summary>
                <description>
                    Matches stations at a range of depths below the surface.
                </description>
                <example>
                    <stationDepthRange>
                        <unitRange>
                            <unit>METER</unit>
                            <min>100</min>
                            <max>200</max>
                        </unitRange>
                    </stationDepthRange>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationType">
                <xsd:sequence>
                    <xsd:element name="unitRange" type="unitRangeType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!--STATION EFFECTIVE TIME OVERLAP TYPE-->
    <xsd:complexType name="stationEffectiveTimeOverlapType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches if the station effective time overlaps the given time
                    range.
                </summary>
                <description>
                    Matches if the station effective time overlaps the given time
                    range. This is generally used to avoid processing stations
                    that did not yet exist, or were deactivated before a time
                    range of interest.
                </description>
                <example>
                    <stationEffectiveTimeOverlap>
                        <effectiveTimeOverlap>
                            <min>20020701T00:00:00.001Z</min>
                            <max>20021030T00:00:00.001Z</max>
                        </effectiveTimeOverlap>
                    </stationEffectiveTimeOverlap>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationType">
                <xsd:sequence>
                    <xsd:element name="effectiveTimeOverlap" type="effectiveTimeOverlapType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="stationAreaType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches stations that are within a given area.
                </summary>
                <description>
                    Matches stations that are within a given area. See the
                    documentation for Area to see the available area types.
                </description>
                <example>
                    <stationArea>
                        <boxArea>
                            <latitudeRange>
                                <min>25</min>
                                <max>35</max>
                            </latitudeRange>
                            <longitudeRange>
                                <min>-80</min>
                                <max>-70</max>
                            </longitudeRange>
                        </boxArea>
                    </stationArea>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationType">
                <xsd:sequence>
                    <xsd:element ref="area"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="stationANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between station subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <stationAND>
                        <stationEffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </stationEffectiveTimeOverlap>
                        <stationArea>
                            <boxArea>
                                <latitudeRange>
                                    <min>25</min>
                                    <max>35</max>
                                </latitudeRange>
                                <longitudeRange>
                                    <min>-80</min>
                                    <max>-70</max>
                                </longitudeRange>
                            </boxArea>
                        </stationArea>
                    </stationAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationType">
                <xsd:sequence>
                    <xsd:element ref="station" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="stationORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between station subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. If the first subsetters returns
                    true then the second is not evaluated.
                </description>
                <example>
                    <stationOR>
                        <stationEffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </stationEffectiveTimeOverlap>
                        <stationArea>
                            <boxArea>
                                <latitudeRange>
                                    <min>25</min>
                                    <max>35</max>
                                </latitudeRange>
                                <longitudeRange>
                                    <min>-80</min>
                                    <max>-70</max>
                                </longitudeRange>
                            </boxArea>
                        </stationArea>
                    </stationOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationType">
                <xsd:sequence>
                    <xsd:element ref="station" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="stationXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between station subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of all
                    included subsetters.
                </description>
                <example>
                    <stationXOR>
                        <stationEffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </stationEffectiveTimeOverlap>
                        <stationArea>
                            <boxArea>
                                <latitudeRange>
                                    <min>25</min>
                                    <max>35</max>
                                </latitudeRange>
                                <longitudeRange>
                                    <min>-80</min>
                                    <max>-70</max>
                                </longitudeRange>
                            </boxArea>
                        </stationArea>
                    </stationXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationType">
                <xsd:sequence>
                    <xsd:element ref="station" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="stationNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of a station subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of the
                    included EventAttr subsetter.
                </description>
                <example>
                    <stationNOT>
                        <stationArea>
                            <boxArea>
                                <latitudeRange>
                                    <min>25</min>
                                    <max>35</max>
                                </latitudeRange>
                                <longitudeRange>
                                    <min>-80</min>
                                    <max>-70</max>
                                </longitudeRange>
                            </boxArea>
                        </stationArea>
                    </stationNOT>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="stationType">
                <xsd:sequence>
                    <xsd:element ref="station" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="siteIDANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between siteId subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <siteIdAND>
                        <siteCode>  </siteCode>
                        <siteCode>00</siteCode>
                    </siteIdAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteIDType">
                <xsd:sequence>
                    <xsd:element ref="siteID" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="siteIDORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between siteId subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. If the first subsetters returns
                    true then the second is not evaluated.
                </description>
                <example>
                    <siteIdOR>
                        <siteCode>  </siteCode>
                        <siteCode>00</siteCode>
                    </siteIdOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteIDType">
                <xsd:sequence>
                    <xsd:element ref="siteID" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="siteIDXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between siteId subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of all
                    included subsetters.
                </description>
                <example>
                    <siteIdXOR>
                        <siteCode>  </siteCode>
                        <siteCode>00</siteCode>
                    </siteIdXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteIDType">
                <xsd:sequence>
                    <xsd:element ref="siteID" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="siteIDNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of a siteId subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of the
                    included subsetter.
                </description>
                <example>
                    <siteIdNOT>
                        <siteCode>00</siteCode>
                    </siteIdNOT>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteIDType">
                <xsd:sequence>
                    <xsd:element ref="siteID" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="siteCodeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches a site code.
                </summary>
                <description>
                    Matches a site code. This is a simple string match.
                </description>
                <example>
                    <siteCode><value>00</value></siteCode>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteIDType">
                <xsd:sequence>
                    <xsd:element name="value" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!-- TYPE DECLARATIONS FOR THE SUBSETTER SITE -->

    <xsd:complexType name="siteDepthRangeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches sites at a range of depths below the surface.
                </summary>
                <description>
                    Matches sites at a range of depths below the surface. This
                    might be used to separate surface sites from borehole sites.
                </description>
                <example>
                    <siteDepthRange>
                        <unitRange>
                            <unit>METER</unit>
                            <min>100</min>
                            <max>200</max>
                        </unitRange>
                    </siteDepthRange>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteType">
                <xsd:sequence>
                    <xsd:element name="unitRange" type="unitRangeType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="siteEffectiveTimeOverlapType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches if the site effective time overlaps the given time
                    range.
                </summary>
                <description>
                    Matches if the site effective time overlaps the given time
                    range. This is generally used to avoid processing sites
                    that did not yet exist, or were deactivated before a time
                    range of interest.
                </description>
                <example>
                    <siteEffectiveTimeOverlap>
                        <effectiveTimeOverlap>
                            <min>20020701T00:00:00.001Z</min>
                            <max>20021030T00:00:00.001Z</max>
                        </effectiveTimeOverlap>
                    </siteEffectiveTimeOverlap>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteType">
                <xsd:sequence>
                    <xsd:element name="effectiveTimeOverlap" type="effectiveTimeOverlapType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="siteAreaType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches sites that are within a given area.
                </summary>
                <description>
                    Matches sites that are within a given area. See the
                    documentation for Area to see the available area types.
                </description>
                <example>
                    <siteArea>
                        <boxArea>
                            <latitudeRange>
                                <min>25.123</min>
                                <max>25.124</max>
                            </latitudeRange>
                            <longitudeRange>
                                <min>-80.124</min>
                                <max>-80.123</max>
                            </longitudeRange>
                        </boxArea>
                    </siteArea>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteType">
                <xsd:sequence>
                    <xsd:element ref="area"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="siteANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between site subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <siteAND>
                        <siteDepthRange>
                            <unitRange>
                                <unit>METER</unit>
                                <min>100</min>
                                <max>200</max>
                            </unitRange>
                        </siteDepthRange>
                        <siteEffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </siteEffectiveTimeOverlap>
                    </siteAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteType">
                <xsd:sequence>
                    <xsd:element ref="site" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="siteORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between site subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. If the first subsetters returns
                    true then the second is not evaluated.
                </description>
                <example>
                    <siteOR>
                        <siteDepthRange>
                            <unitRange>
                                <unit>METER</unit>
                                <min>100</min>
                                <max>200</max>
                            </unitRange>
                        </siteDepthRange>
                        <siteEffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </siteEffectiveTimeOverlap>
                    </siteOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteType">
                <xsd:sequence>
                    <xsd:element ref="site" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="siteXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between site subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of the 2
                    included subsetters.
                </description>
                <example>
                    <siteXOR>
                        <siteDepthRange>
                            <unitRange>
                                <unit>METER</unit>
                                <min>100</min>
                                <max>200</max>
                            </unitRange>
                        </siteDepthRange>
                        <siteEffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </siteEffectiveTimeOverlap>
                    </siteXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteType">
                <xsd:sequence>
                    <xsd:element ref="site" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="siteNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of an site subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of the
                    included subsetter.
                </description>
                <example>
                    <siteNOT>
                        <siteDepthRange>
                            <unitRange>
                                <unit>METER</unit>
                                <min>100</min>
                                <max>200</max>
                            </unitRange>
                        </siteDepthRange>
                    </siteNOT>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="siteType">
                <xsd:sequence>
                    <xsd:element ref="site" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- TYPE DECLARATIONS FOR THE SUBSETTER CHANNELID -->

    <xsd:complexType name="channelIDANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between channelId subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <channelIDAND>
                        <bandCode><value>B</value></bandCode>
                        <gainCode><value>H</value></gainCode>
                    </channelIDAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelIDType">
                <xsd:sequence>
                    <xsd:element ref="channelID" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="channelIDORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between channelID subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. If the first subsetters returns
                    true then the second is not evaluated.
                </description>
                <example>
                    <channelIDOR>
                        <bandCode><value>B</value></bandCode>
                        <gainCode><value>H</value></gainCode>
                    </channelIDOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelIDType">
                <xsd:sequence>
                    <xsd:element ref="channelID" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="channelIDXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of all
                    included subsetters.
                </description>
                <example>
                    <channelIDXOR>
                        <bandCode><value>B</value></bandCode>
                        <gainCode><value>H</value></gainCode>
                    </channelIDXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelIDType">
                <xsd:sequence>
                    <xsd:element ref="channelID" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="channelIDNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of an channelId subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of the
                    included subsetter.
                </description>
                <example>
                    <channelIDAND>
                        <gainCode><value>H</value></gainCode>
                    </channelIDAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelIDType">
                <xsd:sequence>
                    <xsd:element ref="channelID" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="bandCodeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches a band code in a channel code.
                </summary>
                <description>
                    Matches a band code in a channel code, such as B for
                    broadband and L for long period. See the SEED manual for
                    the list of available code letters.
                </description>
                <example>
                    <bandCode><value>B</value></bandCode>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelIDType">
                <xsd:sequence>
                    <xsd:element name="value" type="channelCodeUtilType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="gainCodeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches a band code in a channel code.
                </summary>
                <description>
                    Matches a gain code in a channel code, such as H for
                    high gain and L for low gain. See the SEED manual for
                    the list of available code letters.
                </description>
                <example>
                    <gainCode><value>H</value></gainCode>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelIDType">
                <xsd:sequence>
                    <xsd:element name="value" type="channelCodeUtilType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--BAND CODE TYPE-->
    <xsd:complexType name="orientationCodeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches a orientation code in a channel code.
                </summary>
                <description>
                    Matches a orientation code in a channel code, such as Z for
                    vertical and N for north. See the SEED manual for
                    the list of available code letters.
                </description>
                <example>
                    <orientationCode><value>Z</value></orientationCode>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelIDType">
                <xsd:sequence>
                    <xsd:element name="value" type="channelCodeUtilType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!-- TYPE DECLARATIONS FOR THE SUBSETTER *****CHANNEL***** -->

    <xsd:complexType name="channelANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between channel subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <channelAND>
                        <channeleffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </channeleffectiveTimeOverlap>
                        <sampling>
                            <min>1</min>
                            <max>40</max>
                            <interval>
                                <unit>SECOND</unit>
                                <value>1</value>
                            </interval>
                        </sampling>
                    </channelAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelType">
                <xsd:sequence>
                    <xsd:element ref="channel" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="channelORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between channel subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. If the first subsetters returns
                    true then the second is not evaluated.
                </description>
                <example>
                    <channelOR>
                        <channeleffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </channeleffectiveTimeOverlap>
                        <sampling>
                            <min>1</min>
                            <max>40</max>
                            <interval>
                                <unit>SECOND</unit>
                                <value>1</value>
                            </interval>
                        </sampling>
                    </channelOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelType">
                <xsd:sequence>
                    <xsd:element ref="channel" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="channelXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between channel subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of all
                    included subsetters.
                </description>
                <example>
                    <channelXOR>
                        <channeleffectiveTimeOverlap>
                            <effectiveTimeOverlap>
                                <min>20020701T00:00:00.001Z</min>
                                <max>20021030T00:00:00.001Z</max>
                            </effectiveTimeOverlap>
                        </channeleffectiveTimeOverlap>
                        <sampling>
                            <min>1</min>
                            <max>40</max>
                            <interval>
                                <unit>SECOND</unit>
                                <value>1</value>
                            </interval>
                        </sampling>
                    </channelXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelType">
                <xsd:sequence>
                    <xsd:element ref="channel" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="channelNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of an channel subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of the
                    included subsetter.
                </description>
                <example>
                    <channelNOT>
                        <sampling>
                            <min>1</min>
                            <max>40</max>
                            <interval>
                                <unit>SECOND</unit>
                                <value>1</value>
                            </interval>
                        </sampling>
                    </channelNOT>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelType">
                <xsd:sequence>
                    <xsd:element ref="channel" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="samplingType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches if the sampling rate of the channel is within the
                    range.
                </summary>
                <description>
                    Matches if the sampling rate of the channel is within the
                    range. Both the min and max are optional, although at least
                    one must be given to have any effect.
                </description>
                <example>
                    <sampling>
                        <min>1</min>
                        <max>40</max>
                        <interval>
                            <unit>SECOND</unit>
                            <value>1</value>
                        </interval>
                    </sampling>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelType">
                <xsd:sequence>
                    <xsd:element name="min" type="xsd:integer"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element name="max" type="xsd:integer"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element name="interval" type="timeIntervalType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="channelEffectiveTimeOverlapType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches if the channel effective time overlaps the given time
                    range.
                </summary>
                <description>
                    Matches if the channel effective time overlaps the given time
                    range. This is generally used to avoid processing channels
                    that did not yet exist, or were deactivated before a time
                    range of interest.
                </description>
                <example>
                    <channelEffectiveTimeOverlap>
                        <effectiveTimeOverlap>
                            <min>20020701T00:00:00.001Z</min>
                            <max>20021030T00:00:00.001Z</max>
                        </effectiveTimeOverlap>
                    </channelEffectiveTimeOverlap>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelType">
                <xsd:sequence>
                    <xsd:element name="effectiveTimeOverlap" type="effectiveTimeOverlapType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="orientationRangeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches an orientation of a channel.
                </summary>
                <description>
                    The match is true if the channel's orientation is with the
                    offset of the given azimuth and dip. The offset, as well as
                    the azimuth and dip are given in degrees.
                </description>
                <example>
                    <orientationRange>
                        <azimuth>45</azimuth>
                        <dip>0</dip>
                        <maxOffset>20</maxOffset>
                    </orientationRange>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelType">
                <xsd:sequence>
                    <xsd:element ref="azimuth"/>
                    <xsd:element ref="dip"/>
                    <xsd:element name="maxOffset" type="xsd:float"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="orientationAzimuthRangeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches the azimuth of a channel.
                </summary>
                <description>
                    The match is true if azimuth of the channel's orientation is with the
                    the given azimuth range. The min and max are given in degrees.
                </description>
                <example>
                    <orientationAzimuthRange>
                        <min>-10</min>
                        <max>10</max>
                    </orientationAzimuthRange>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelType">
                <xsd:sequence>
                    <xsd:element name="min" type="xsd:float"/>
                    <xsd:element name="max" type="xsd:float"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="orientationDipRangeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Matches the dip of a channel.
                </summary>
                <description>
                    The match is true if the dip of the channel's orientation is with the
                    the given dip range. The min and max are given in degrees.
                </description>
                <example>
                    <orientationDipRange>
                        <min>-10</min>
                        <max>10</max>
                    </orientationDipRange>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="channelType">
                <xsd:sequence>
                    <xsd:element name="min" type="xsd:float"/>
                    <xsd:element name="max" type="xsd:float"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!-- TYPE DECLARATIONS FOR THE PROCESSES AT THE END OF THE NETWORKARM -->

    <xsd:complexType name="externalNetworkProcessType">
        <xsd:complexContent>
            <xsd:extension base="externalProcessType">
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="printLineChannelProcessorType">
        <xsd:complexContent>
            <xsd:extension base="internalProcessType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!-- common Global Elements of Network Arm -->
    <xsd:element name="azimuth" type="xsd:float"/>
    <xsd:element name="dip" type="xsd:float"/>

    <!-- ELEMENT DECLARATIONS FOR NETWORK SOURCE TYPE -->
    <xsd:element name="networkSource" abstract="true"/>

    <xsd:element name="networkFinder" type="networkFinderType" substitutionGroup="networkSource"/>

    <!-- ELEMENT DECLARATIONS FOR NETWORK ID TYPE -->
    <xsd:element name="networkID" abstract="true"/>
    <xsd:element name="networkCode" type="networkCodeType" substitutionGroup="networkID"/>
    <xsd:element name="networkIDAND" type="networkIDANDType" substitutionGroup="networkID"/>
    <xsd:element name="networkIDOR" type="networkIDORType" substitutionGroup="networkID"/>
    <xsd:element name="networkIDXOR" type="networkIDXORType" substitutionGroup="networkID"/>
    <xsd:element name="networkIDNOT" type="networkIDNOTType" substitutionGroup="networkID"/>


    <!-- ELEMENT DECLARATIONS FOR NETWORK ATTR TYPE -->
    <xsd:element name="networkAttr" type="networkAttrType" abstract="true"/>
    <xsd:element name="networkAttrName" type="networkAttrNameType" substitutionGroup="networkAttr"/>
    <xsd:element name="networkAttrOwner" type="networkAttrOwnerType" substitutionGroup="networkAttr"/>
    <xsd:element name="networkEffectiveTimeOverlap" type="networkEffectiveTimeOverlapType" substitutionGroup="networkAttr"/>
    <xsd:element name="networkAttrAND" type="networkAttrANDType" substitutionGroup="networkAttr"/>
    <xsd:element name="networkAttrOR" type="networkAttrORType" substitutionGroup="networkAttr"/>
    <xsd:element name="networkAttrXOR" type="networkAttrXORType" substitutionGroup="networkAttr"/>
    <xsd:element name="networkAttrNOT" type="networkAttrNOTType" substitutionGroup="networkAttr"/>

    <!-- ELEMENT DECLARATIONS FOR STATION ID TYPE -->
    <xsd:element name="stationID" type="stationIDType" abstract="true"/>
    <xsd:element name="stationCode" type="stationCodeType" substitutionGroup="stationID"/>
    <xsd:element name="stationIDAND" type="stationIDANDType" substitutionGroup="stationID"/>
    <xsd:element name="stationIDOR" type="stationIDORType" substitutionGroup="stationID"/>
    <xsd:element name="stationIDXOR" type="stationIDXORType" substitutionGroup="stationID"/>
    <xsd:element name="stationIDNOT" type="stationIDNOTType" substitutionGroup="stationID"/>

    <!-- ELEMENT DECLARATIONS FOR STATION TYPE -->
    <xsd:element name="station" type="stationType" abstract="true"/>
    <xsd:element name="stationName" type="stationNameType" substitutionGroup="station"/>
    <xsd:element name="stationOperator" type="stationOperatorType" substitutionGroup="station"/>
    <xsd:element name="stationDepthRange" type="stationDepthRangeType" substitutionGroup="station"/>
    <xsd:element name="stationEffectiveTimeOverlap" type="stationEffectiveTimeOverlapType" substitutionGroup="station"/>
    <!-- element representing eventArea -->
    <xsd:element name="stationArea" type="stationAreaType" substitutionGroup="station"/>
    <xsd:element name="stationAND" type="stationANDType" substitutionGroup="station"/>
    <xsd:element name="stationOR" type="stationORType" substitutionGroup="station"/>
    <xsd:element name="stationXOR" type="stationXORType" substitutionGroup="station"/>
    <xsd:element name="stationNOT" type="stationNOTType" substitutionGroup="station"/>

    <!-- ELEMENT DECLARATIONS FOR SITE ID TYPE -->
    <xsd:element name="siteID" type="siteIDType" abstract="true"/>
    <xsd:element name="siteCode" type="siteCodeType" substitutionGroup="siteID"/>
    <xsd:element name="siteIDAND" type="siteIDANDType" substitutionGroup="siteID"/>
    <xsd:element name="siteIDOR" type="siteIDORType" substitutionGroup="siteID"/>
    <xsd:element name="siteIDXOR" type="siteIDXORType" substitutionGroup="siteID"/>
    <xsd:element name="siteIDNOT" type="siteIDNOTType" substitutionGroup="siteID"/>

    <!-- ELEMENT DECLARATIONS FOR SITE TYPE -->
    <xsd:element name="site" type="siteType" abstract="true"/>
    <xsd:element name="siteDepthRange" type="siteDepthRangeType" substitutionGroup="site"/>
    <xsd:element name="siteEffectiveTimeOverlap" type="siteEffectiveTimeOverlapType" substitutionGroup="site"/>
    <!-- element representing siteArea -->
    <xsd:element name="siteArea" type="siteAreaType" substitutionGroup="site"/>
    <xsd:element name="siteAND" type="siteANDType" substitutionGroup="site"/>
    <xsd:element name="siteOR" type="siteORType" substitutionGroup="site"/>
    <xsd:element name="siteXOR" type="siteXORType" substitutionGroup="site"/>
    <xsd:element name="siteNOT" type="siteNOTType" substitutionGroup="site"/>

    <!-- ELEMENT DECLARATIONS FOR CHANNEL ID TYPE -->
    <xsd:element name="channelID" type="channelIDType" abstract="true"/>
    <xsd:element name="bandCode" type="bandCodeType" substitutionGroup="channelID"/>
    <xsd:element name="gainCode" type="gainCodeType" substitutionGroup="channelID"/>
    <xsd:element name="orientationCode" type="orientationCodeType" substitutionGroup="channelID"/>
    <xsd:element name="channelIDAND" type="channelIDANDType" substitutionGroup="channelID"/>
    <xsd:element name="channelIDOR" type="channelIDORType" substitutionGroup="channelID"/>
    <xsd:element name="channelIDXOR" type="channelIDXORType" substitutionGroup="channelID"/>
    <xsd:element name="channelIDNOT" type="channelIDNOTType" substitutionGroup="channelID"/>

    <!-- ELEMENT DECLARATIONS FOR CHANNEL TYPE -->
    <xsd:element name="channel" type="channelType" abstract="true"/>
    <xsd:element name="sampling" type="samplingType" substitutionGroup="channel"/>
    <xsd:element name="channelEffectiveTimeOverlap" type="channelEffectiveTimeOverlapType" substitutionGroup="channel"/>
    <xsd:element name="orientationRange" type="orientationRangeType" substitutionGroup="channel"/>
    <xsd:element name="orientationAzimuthRange" type="orientationAzimuthRangeType" substitutionGroup="channel"/>
    <xsd:element name="orientationDipRange" type="orientationDipRangeType" substitutionGroup="channel"/>
    <xsd:element name="channelAND" type="channelANDType" substitutionGroup="channel"/>
    <xsd:element name="channelOR" type="channelORType" substitutionGroup="channel"/>
    <xsd:element name="channelXOR" type="channelXORType" substitutionGroup="channel"/>
    <xsd:element name="channelNOT" type="channelNOTType" substitutionGroup="channel"/>



    <!-- element representing the process -->
    <xsd:element name="networkProcess" type="processType" abstract="true"/>
    <xsd:element name="printlineChannelProcessor" type="printLineChannelProcessorType"  substitutionGroup="networkProcess"/>
    <xsd:element name="externalNetworkProcess" type="externalNetworkProcessType" substitutionGroup="networkProcess"/>

    <xsd:complexType name="networkArmType">
        <xsd:complexContent>
            <xsd:extension base="armType">
                <xsd:sequence>
                    <xsd:element ref="networkSource"  minOccurs="1" maxOccurs="1"/>
                    <xsd:element ref="networkID"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="networkAttr"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="stationID" minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="station"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="siteID"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="site"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="channelID"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="channel"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="networkProcess" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="networkArm" type="networkArmType"/>

</xsd:schema>
