<?xml version="1.0"?>

<xsd:schema targetNamespace="http://www.seis.sc.edu/software/sod"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    
    
    <xsd:annotation>
        <xsd:documentation xml:lang="en">
            Schema for the WaveFormArm of SOD
        </xsd:documentation>
    </xsd:annotation>
    
    <!-- Include the external schemas necessary for this schema -->
    <xsd:include schemaLocation="utilities.xsd"/>
    <xsd:include schemaLocation="EventArm.xsd"/>
    <xsd:include schemaLocation="NetworkArm.xsd"/>
    
    <!-- Abstract Type Declarations -->
    
    <!-- ABSTRACT TYPE EVENT STATION-->
    <xsd:complexType name="eventStationType" abstract="true">
      <xsd:annotation>
    <xsd:documentation xml:lang="en">
            <summary>
                Abstract superclass of all EventStation subsetters.
            </summary>
            <description>
                This is a place holder for EventStation subsetters. See the
                list of known subclasses for subsetters that can be used.
            </description>
            <example>
               
            </example>
    </xsd:documentation>
      </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- ABSTRACT TYPE EVENT CHANNEL-->
    <xsd:complexType name="eventChannelType" abstract="true">
      <xsd:annotation>
    <xsd:documentation xml:lang="en">
            <summary>
                Abstract superclass of all EventChannel subsetters.
            </summary>
            <description>
                This is a place holder for EventChannel subsetters. See the
                list of known subclasses for subsetters that can be used.
            </description>
            <example>
               
            </example>
    </xsd:documentation>
      </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- ABSTRACT TYPE REQUEST GENERATOR-->
    <xsd:complexType name="requestGeneratorType" abstract="true">
      <xsd:annotation>
    <xsd:documentation xml:lang="en">
            <summary>
                Abstract superclass of all request generators.
            </summary>
            <description>
                This is a place holder for request generators. See the
                list of known subclasses for elements that can be used.
            </description>
            <example>
               
            </example>
    </xsd:documentation>
      </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- ABSTRACT TYPE REQUEST GENERATOR-->
    <xsd:complexType name="requestSubsetterType" abstract="true">
      <xsd:annotation>
    <xsd:documentation xml:lang="en">
            <summary>
                Abstract superclass of all request subsetters.
            </summary>
            <description>
                This is a place holder for request subsetter. See the
                list of known subclasses for elements that can be used.
            </description>
            <example>
               
            </example>
    </xsd:documentation>
      </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- ABSTRACT TYPE AVAILABLE DATA-->
    <xsd:complexType name="availableDataType" abstract="true">
      <xsd:annotation>
    <xsd:documentation xml:lang="en">
            <summary>
                Abstract superclass of all AvailableData subsetters.
            </summary>
            <description>
                This is a place holder for AvailableData subsetters. See the
                list of known subclasses for subsetters that can be used.
            </description>
            <example>
               
            </example>
    </xsd:documentation>
      </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>
       
    <!-- ABSTRACT TYPE Seismogram-->
    <xsd:complexType name="seismogramType" abstract="true">
      <xsd:annotation>
    <xsd:documentation xml:lang="en">
            <summary>
                Abstract superclass of all Seismogram subsetters.
            </summary>
            <description>
                This is a place holder for Seismogram subsetters. See the
                list of known subclasses for subsetters that can be used.
            </description>
            <example>
               
            </example>
    </xsd:documentation>
      </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>
  
    <!-- ABSTRACT TYPE WAVE FORM-->
    <xsd:complexType name="seismogramProcessType" abstract="true">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
            <summary>
                Abstract superclass of all seismogram processors.
            </summary>
            <description>
                This is a place holder for seismogram processors. See the
                list of known subclasses for subsetters that can be used.
            </description>
                <example>
                   
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- ABSTRACT TYPE DATA CENTER SOURCE -->
    <xsd:complexType name="dataCenterType" abstract="true">
      <xsd:annotation>
    <xsd:documentation xml:lang="en">
            <summary>
                Abstract superclass of all data centers.
            </summary>
            <description>
                This is a place holder for DataCenters. See the
                list of known subclasses for elements that can be used.
            </description>
            <example>
               
            </example>
    </xsd:documentation>
      </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="sourceType"/>
        </xsd:complexContent>
    </xsd:complexType>
    
    
    
    <!-- TYPE DECLARATIONS FOR THE SUBSETTER *****EVENTSTATION***** -->
    
    <!-- EVENT STATION AND TYPE -->
    <xsd:complexType name="eventStationANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between EventStation subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <eventStationAND>
                        <distanceRange>
                           <unit>DEGREE</unit>
                           <min>40</min>
                        </distanceRange>
                        <backAzimuthRange>
                           <min>30</min>
                           <max>45</max>
                        </backAzimuthRange>
                    </eventStationAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventStationType">
                <xsd:sequence>
                    <xsd:element ref="eventStation" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT STATION OR TYPE -->
    <xsd:complexType name="eventStationORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between EventStation subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. The subsetters after the
                    first true output are not evaluated.
                </description>
                <example>
                    <eventStationOR>
                        <distanceRange>
                            <unit>DEGREE</unit>
                            <min>40</min>
                        </distanceRange>
                        <backAzimuthRange>
                           <min>30</min>
                           <max>45</max>
                        </backAzimuthRange>
                    </eventStationOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventStationType">
                <xsd:sequence>
                    <xsd:element ref="eventStation" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT STATION XOR TYPE -->
    <xsd:complexType name="eventStationXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between EventStation subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of all
                    included subsetters.
                </description>
                <example>
                    <eventStationXOR>
                        <distanceRange>
                           <unit>DEGREE</unit>
                           <min>40</min>
                        </distanceRange>
                        <backAzimuthRange>
                           <min>30</min>
                           <max>45</max>
                        </backAzimuthRange>
                    </eventStationXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventStationType">
                <xsd:sequence>
                    <xsd:element ref="eventStation" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT STATION NOT TYPE -->
    <xsd:complexType name="eventStationNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of an EventStation subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of the
                    included subsetter.
                </description>
                <example>
                    <eventStationNOT>
                        <distanceRange>
                           <unit>DEGREE</unit>
                           <min>40</min>
                        </distanceRange>
                    </eventStationNOT>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventStationType">
                <xsd:sequence>
                    <xsd:element ref="eventStation" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT STATION DISTANCE TYPE -->
    <xsd:complexType name="distanceRangeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                   Subsetter based on the distance from the event to station.
                </summary>
                <description>
                   This accepts event station pairs where the distance
                   between the preferred origin to the station is within the
                   range given.
                </description>
                <example>
                   <distanceRange>
                       <unit>DEGREE</unit>
                       <min>30</min>
                       <max>90</max>
                   </distanceRange>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventStationType">
                <xsd:sequence>
                    <xsd:element name="unit" type="unitType"/>
                    <xsd:element name="min" type="xsd:integer"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element name="max" type="xsd:integer"  minOccurs="0" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EMBEDDED ORIGIN TYPE -->
    <xsd:complexType name="embeddedOriginSubsetterType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                   Allows the embeedding of an origin subsetter into a
                   EventStation location.
                </summary>
                <description>
                   Allows the embeedding of an origin subsetter into a
                   EventStation location. This is mainly used with an AND or OR
                   where one condition only depends on the origin.
                </description>
                <example>
                   <embeddedOriginSubsetter>
                      <magnitudeRange>
                          <min>5.5</min>
                      </magnitudeRange>
                   </embeddedOriginSubsetter>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventStationType">
                <xsd:sequence>
                    <xsd:element ref="origin"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT STATION STATION TYPE -->
    <xsd:complexType name="embeddedStationSubsetterType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                   Allows the embeedding of an station subsetter into a
                   EventStation location.
                </summary>
                <description>
                   Allows the embeedding of an station subsetter into a
                   EventStation location. This is mainly used with an AND or OR
                   where one condition only depends on the station.
                </description>
                <example>
                   <embeddedStationSubsetter>
                    <stationDepthRange>
                        <unitRange>
                            <unit>METER</unit>
                            <min>100</min>
                            <max>200</max>
                        </unitRange>
                    </stationDepthRange>
                   </embeddedStationSubsetter>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventStationType">
                <xsd:sequence>
                    <xsd:element ref="station"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT STATION AZIMUTH RANGE TYPE -->
    <xsd:complexType name="azimuthRangeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                   Subsetter based on the azimuth from the event to station.
                </summary>
                <description>
                   This accepts event station pairs where the azimuth
                   from the preferred origin to the station is within the
                   range given in degrees.
                </description>
                <example>
                   <azimuthRange>
                       <unit>DEGREE</unit>
                       <min>30</min>
                       <max>90</max>
                   </azimuthRange>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventStationType">
                <xsd:sequence>
                    <xsd:element name="min" type="xsd:float"/>
                    <xsd:element name="max" type="xsd:float"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    
    <!-- EVENT STATION BACK AZIMUTH RANGE TYPE -->
    <xsd:complexType name="backAzimuthRangeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                   Subsetter based on the back azimuth from the station to the event.
                </summary>
                <description>
                   This accepts event station pairs where the azimuth
                   from the station to the preferred origin is within the
                   range given in degrees.
                </description>
                <example>
                   <backAzimuthRange>
                       <unit>DEGREE</unit>
                       <min>30</min>
                       <max>90</max>
                   </backAzimuthRange>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventStationType">
                <xsd:sequence>
                    <xsd:element name="min" type="xsd:float"/>
                    <xsd:element name="max" type="xsd:float"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT STATION BACK LINEAR DISTANCE MAGNITUDE RANGE TYPE -->
    <xsd:complexType name="linearDistanceMagnitudeRangeType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                   Accepts event stations pairs above a linear threshold of magnitude with distance.
                </summary>
                <description>
                   If the magnitude of the event is greater than or equal to
                   the linear interpolation at the event station distance, then
                   the event statino pair is accepted. To reverse and take
                   events smaller than the linear interpolation, enclose
                   this in an EventStationNOT.
                </description>
                <example>
                   <linearDistanceMagnitudeRange>
                      <magnitudeRange>
                          <magType>mb</magType>
                          <magType>M</magType>
                          <min>5.5</min>
                      </magnitudeRange>
                   <distanceRange>
                       <unit>DEGREE</unit>
                       <min>30</min>
                       <max>90</max>
                   </distanceRange>
                   </linearDistanceMagnitudeRange>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventStationType">
                <xsd:sequence>
                    <xsd:element ref="magnitudeRange"/>
                    <xsd:element ref="distanceRange"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- PHASE TURN INTERACTION TYPE -->
    <xsd:simpleType name="phaseTurnInteractionType">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="TOPSIDE REFLECTION"/>
            <xsd:enumeration value="BOTTOMSIDE REFLECTION"/>
            <xsd:enumeration value="TURNPOINT"/>
            <xsd:enumeration value="UPGOING S TO P CONVERSION"/>
            <xsd:enumeration value="UPGOING P TO S CONVERSION"/>
            <xsd:enumeration value="DOWNGOING S TO P CONVERSION"/>
            <xsd:enumeration value="DOWNGOING P TO S CONVERSION"/>
            <xsd:enumeration value="PATH"/>
        </xsd:restriction>
    </xsd:simpleType>
    
    <!-- ABSTRACT TYPE PHASE TYPE -->
    <xsd:complexType name="phaseAbstractType"  abstract="true">
        <xsd:complexContent>
            <xsd:extension base="eventStationType">
                <xsd:sequence>
                    <xsd:element name="modelName" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="phaseName" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT STATION PHASE EXISTS TYPE -->
    <xsd:complexType name="phaseExistsType">
      <xsd:annotation>
    <xsd:documentation xml:lang="en">
            <summary>
                Accepts a event-station pair if the given phase exists.
            </summary>
            <description>
                Accepts a event-station pair if the given phase exists.
            </description>
            <example>
               <phaseExists>
              <modelName>prem</modelName>
                  <phaseName>P</phaseName>
               </phaseExists>
            </example>
    </xsd:documentation>
      </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="phaseAbstractType">
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    
    <!-- EVENT STATION PHASE INTERACTION TYPE -->
    <xsd:complexType name="phaseInteractionAbstractType"  abstract="true">
        <xsd:complexContent>
            <xsd:extension base="phaseAbstractType">
                <xsd:sequence>
                    <xsd:element name="interactionStyle" type="phaseTurnInteractionType"/>
                    <xsd:element name="interactionNumber" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- PHASE RELATIVE ABSOLUTE ABSTRACT TYPE -->
    <xsd:complexType name="phaseRelativeAbsoluteAbstractType" abstract="true"/>
    
    
    <!-- PHASE RELATIVE TYPE -->
    <xsd:complexType name="phaseInteractionRelativeType">
        <xsd:complexContent>
            <xsd:extension base="phaseRelativeAbsoluteAbstractType">
                <xsd:sequence>
                    <xsd:element name="reference" type="phaseDistanceReferenceType"/>
                    <xsd:element ref="area" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="depthRange" minOccurs="0" maxOccurs="unbounded">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="unitRange" type="unitRangeType"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element ref="distanceRange" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT STATION PHASE INTERACTION ABSOLUTE TYPE -->
    <xsd:complexType name="phaseInteractionAbsoluteType">
        <xsd:complexContent>
            <xsd:extension base="phaseRelativeAbsoluteAbstractType">
                <xsd:sequence>
                    <xsd:element ref="area" minOccurs="0"  maxOccurs="0"/>
                    <xsd:element name="depthRange" minOccurs="0" maxOccurs="0">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="unitRange" type="unitRangeType"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT STATION PHASE INTERACTION TYPE -->
    <xsd:complexType name="phaseInteractionType">
        <xsd:complexContent>
            <xsd:extension base="phaseInteractionAbstractType">
                <xsd:sequence>
                    <xsd:element ref="phaseRelativeAbsolute" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    
    <!-- PHASE DISTANCE REFERENCE TYPE -->
    <xsd:simpleType name="phaseDistanceReferenceType">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="EVENT"/>
            <xsd:enumeration value="STATION"/>
        </xsd:restriction>
    </xsd:simpleType>
    
    <!-- TYPE DECLARATIONS FOR THE SUBSETTER *****EVENTCHANNEL***** -->
      
    <!-- EMBEDDED EVENT STATION TYPE -->
    <xsd:complexType name="embeddedEventStationType">
      <xsd:annotation>
    <xsd:documentation xml:lang="en">
            <summary>
                Allows an event station subsetter to be embedded within a
        event channel subsetter.
            </summary>
            <description>
                Allows an event station subsetter to be embedded within a
        event channel subsetter. The is most often used within
        an EventChannel logical subsetter.
            </description>
            <example>
               <embeddedEventStation>
                     <distanceRange>
                        <unit>DEGREE</unit>
                        <min>40</min>
                     </distanceRange>
               </embeddedEventStation>
            </example>
    </xsd:documentation>
      </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventChannelType">
                <xsd:sequence>
                    <xsd:element ref="eventStation" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EMBEDDED CHANNEL TYPE -->
    <xsd:complexType name="embeddedChannelType">
      <xsd:annotation>
    <xsd:documentation xml:lang="en">
            <summary>
                Allows a Channel subsetter to be embedded within an
        EventChannel.
            </summary>
            <description>
                Allows a Channel subsetter to be embedded within an
        EventChannel. This is most often used within a EventChannel
                logical.
            </description>
            <example>
        <embeddedChannel>
                <sampling>
                    <min>1</min>
                            <max>40</max>
                            <interval>
                                <unit>SECOND</unit>
                                <value>1</value>
                            </interval>
                        </sampling>
        </embeddedChannel>
            </example>
    </xsd:documentation>
      </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventChannelType">
                <xsd:sequence>
                    <xsd:element ref="channel" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EMBEDDED CHANNELID TYPE -->
    <xsd:complexType name="embeddedChannelIDType">
      <xsd:annotation>
    <xsd:documentation xml:lang="en">
            <summary>
                Allows a ChannelId subsetter to be embedded within an
        EventChannel.
            </summary>
            <description>
                Allows a ChannelId subsetter to be embedded within an
        EventChannel. This is most often used within a EventChannel
                logical.
            </description>
            <example>
               <embeddedChannel>
                  <bandCode>B</bandCode>
               </embeddedChannel>
            </example>
    </xsd:documentation>
      </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventChannelType">
                <xsd:sequence>
                    <xsd:element ref="channelID" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
  
    <!-- EVENT CHANNEL AND TYPE -->
    <xsd:complexType name="eventChannelANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between EventChannel subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <eventChannelAND>
                        <embeddedEventStation>
                           <distanceRange>
                              <unit>DEGREE</unit>
                              <min>40</min>
                           </distanceRange>
                        </embeddedEventStation>
                        <embeddedChannel>
                           <bandCode>B</bandCode>
                        </embeddedChannel>
                    </eventChannelAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventChannelType">
                <xsd:sequence>
                    <xsd:element ref="eventChannel" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT CHANNEL OR TYPE -->
    <xsd:complexType name="eventChannelORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between EventChannel subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. The subsetters after the
                    first true outputed are not evaluated.
                </description>
                <example>
                    <eventChannelOR>
                        <embeddedEventStation>
                           <distanceRange>
                              <unit>DEGREE</unit>
                              <min>40</min>
                           </distanceRange>
                        </embeddedEventStation>
                        <embeddedChannel>
                           <bandCode>B</bandCode>
                        </embeddedChannel>
                    </eventChannelOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventChannelType">
                <xsd:sequence>
                    <xsd:element ref="eventChannel" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT CHANNEL XOR TYPE -->
    <xsd:complexType name="eventChannelXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between EventChannel subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of
                    included subsetters.
                </description>
                <example>
                    <eventChannelXOR>
                        <embeddedEventStation>
                           <distanceRange>
                              <unit>DEGREE</unit>
                              <min>40</min>
                           </distanceRange>
                        </embeddedEventStation>
                        <embeddedChannel>
                           <bandCode>B</bandCode>
                        </embeddedChannel>
                    </eventChannelXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventChannelType">
                <xsd:sequence>
                    <xsd:element ref="eventChannel" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- EVENT CHANNEL NOT TYPE -->
    <xsd:complexType name="eventChannelNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of an EventChannel subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of the
                    included subsetter.
                </description>
                <example>
                    <eventChannelNOT>
                        <embeddedEventStation>
                           <distanceRange>
                              <unit>DEGREE</unit>
                              <min>40</min>
                           </distanceRange>
                        </embeddedEventStation>
                    </eventChannelNOT>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="eventChannelType">
                <xsd:sequence>
                    <xsd:element ref="eventChannel" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    
    <!-- TYPE DECLARATIONS FOR THE SUBSETTER *****DATA CENTER***** -->
    
    <!-- DATA CENTER FIXED DATA CENTER TYPE -->
    <xsd:complexType name="fixedDataCenterType">
        <xsd:complexContent>
            <xsd:extension base="dataCenterType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- TYPE DECLARATIONS FOR THE SUBSETTER REQUESTGENERATOR********** -->
    
    <!-- REQUEST GENERATOR PHASE REQUEST TYPE -->
    <xsd:complexType name="phaseRequestType">
        <xsd:complexContent>
            <xsd:extension base="requestGeneratorType">
                <xsd:sequence>
                    <xsd:element name="model" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="beginPhase" type="xsd:string"/>
                    <xsd:element name="beginOffset" type="timeIntervalType"/>
                    <xsd:element name="endPhase" type="xsd:string"/>
                    <xsd:element name="endOffset" type="timeIntervalType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
      
    <!-- REQUEST GENERATOR CHOICE REQUEST TYPE -->
    
    <!-- ABSTRACT TYPE ChoicePartType-->
    <xsd:complexType name="choicePartType" abstract="true">
            <xsd:sequence>
               <xsd:element ref="requestGenerator" />
            </xsd:sequence>
    </xsd:complexType>
    
    <xsd:element name="choicePart" type="choicePartType" abstract="true" />

    <xsd:element name="eventStationChoice" substitutionGroup="choicePart" >
        <xsd:complexType>
          <xsd:complexContent>
              <xsd:extension base="choicePartType">
                 <xsd:sequence>
                 <xsd:element ref="eventStation" />
                 </xsd:sequence>
              </xsd:extension >
          </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="eventChannelChoice" substitutionGroup="choicePart" >
        <xsd:complexType>
        <xsd:complexContent>
            <xsd:extension base="choicePartType">
<xsd:sequence>
               <xsd:element ref="eventChannel" />
 </xsd:sequence>
            </xsd:extension >
        </xsd:complexContent>
    </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="choiceRequestType">
        <xsd:complexContent>
            <xsd:extension base="requestGeneratorType">
                <xsd:sequence>
                    <xsd:element ref="choicePart" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="otherwise" minOccurs="0">
                       <xsd:complexType>
                             <xsd:sequence>
                                <xsd:element ref="requestGenerator" />
                             </xsd:sequence>
                       </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- TYPE DECLARATIONS FOR THE SUBSETTER *****REQUEST SUBSETTER***** -->
    
    <!-- REQUEST SUBSETTER AND TYPE -->
    <xsd:complexType name="requestSubsetterANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between RequestSubsetter subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <requestSubsetterAND>
                       <something/>
                       <somethingelse/>
                    </requestSubsetterAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="requestSubsetterType">
                <xsd:sequence>
                    <xsd:element ref="requestSubsetter" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- REQUEST SUBSETTER OR TYPE -->
    <xsd:complexType name="requestSubsetterORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between RequestSubsetter subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. The subsetters after the
                    first true outputed are not evaluated.
                </description>
                <example>
                    <requestSubsetterOR>
                       <something/>
                       <somethingelse/>
                    </requestSubsetterOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="requestSubsetterType">
                <xsd:sequence>
                    <xsd:element ref="requestSubsetter" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- REQUEST SUBSETTER XOR TYPE -->
    <xsd:complexType name="requestSubsetterXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between RequestSubsetter subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of all
                    included subsetters.
                </description>
                <example>
                    <requestSubsetterXOR>
                       <something/>
                       <somethingelse/>
                    </requestSubsetterXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="requestSubsetterType">
                <xsd:sequence>
                    <xsd:element ref="requestSubsetter" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- REQUEST SUBSETTER NOT TYPE -->
    <xsd:complexType name="requestSubsetterNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of an RequestSubsetter subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of
                    the included subsetters.
                </description>
                <example>
                    <requestSubsetterNOT>
                       <something/>
                    </requestSubsetterNOT>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="requestSubsetterType">
                <xsd:sequence>
                    <xsd:element ref="requestSubsetter" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
  
    <!-- TYPE DECLARATIONS FOR THE SUBSETTER *****AVAILABLE DATA***** -->
    
    <!-- AVAILABLE DATA AND TYPE -->
    <xsd:complexType name="availableDataANDType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical AND between AvailableData subsetters.
                </summary>
                <description>
                    The output is the logical AND of the outputs of all
                    included subsetters. The subsetters after the
                    first false outputed are not evaluated.
                </description>
                <example>
                    <availableDataAND>
                       <nogaps/>
                       <fullCoverage/>
                    </availableDataAND>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="availableDataType">
                <xsd:sequence>
                    <xsd:element ref="availableData" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- AVAILABLE DATA OR TYPE -->
    <xsd:complexType name="availableDataORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical OR between AvailableData subsetters.
                </summary>
                <description>
                    The output is the logical OR of the outputs of all
                    included subsetters. The subsetters after the
                    first true outputed are not evaluated.
                </description>
                <example>
                    <availableDataOR>
                       <nogaps/>
                       <fullCoverage/>
                    </availableDataOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="availableDataType">
                <xsd:sequence>
                    <xsd:element ref="availableData" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- AVAILABLE DATA XOR TYPE -->
    <xsd:complexType name="availableDataXORType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical XOR between AvailableData subsetters.
                </summary>
                <description>
                    The output is the logical XOR of the outputs of all
                    included subsetters.
                </description>
                <example>
                    <availableDataXOR>
                       <nogaps/>
                       <fullCoverage/>
                    </availableDataXOR>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="availableDataType">
                <xsd:sequence>
                    <xsd:element ref="availableData" minOccurs="2" maxOccurs="2"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- AVAILABLE DATA NOT TYPE -->
    <xsd:complexType name="availableDataNOTType">
        <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Logical NOT of an AvailableData subsetter.
                </summary>
                <description>
                    The output is the logical NOT of the output of
                    the included subsetters.
                </description>
                <example>
                    <availableDataNOT>
                       <nogaps/>
                    </availableDataNOT>
                </example>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="availableDataType">
                <xsd:sequence>
                    <xsd:element ref="availableData" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- AVAILABLE DATA NO GAPS TYPE -->
    <xsd:complexType name="nogapsType">
        <xsd:complexContent>
            <xsd:extension base="availableDataType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- AVAILABLE DATA FULL COVERAGE TYPE -->
    <xsd:complexType name="fullCoverageType">
        <xsd:complexContent>
            <xsd:extension base="availableDataType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- AVAILABLE DATA SOME COVERAGE TYPE -->
    <xsd:complexType name="someCoverageType">
        <xsd:complexContent>
            <xsd:extension base="availableDataType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- TYPE DECLARATIONS FOR THE PROCESSES AT THE END OF THE WAVE FORM ARM -->
    
    <xsd:complexType name="externalSeismogramProcessType">
        <xsd:complexContent>
            <xsd:extension base="seismogramProcessType">
               <xsd:sequence>
                    <xsd:element name="classname" type="xsd:string"/>
                    <xsd:any processContents="lax"  minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:complexType name="printLineSeismogramProcessorType">
        <xsd:complexContent>
            <xsd:extension base="seismogramProcessType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:complexType name="phaseCutType">
         <xsd:annotation>
            <xsd:documentation xml:lang="en">
                <summary>
                    Cuts seismograms relative to predicted phase arrival times.
                </summary>
                <description>
        Cuts seismogras relative to offsets from phase arrival time
        predicted by TauP for the model.
                </description>
                <example>
                    <phaseCut>
                       <model>prem</model>
                       <beginPhase>P</beginPhase>
                       <beginOffset>
                  <unit>SECOND</unit>
              <value>-100</value>
               </beginOffset>
                       <endPhase>P</endPhase>
                       <endOffset>
                  <unit>SECOND</unit>
              <value>-100</value>
               </endOffset>
                    </phaseCut>
                </example>
            </xsd:documentation>
        </xsd:annotation>
       <xsd:complexContent>
            <xsd:extension base="seismogramProcessType">
                <xsd:sequence>
                    <xsd:element name="model" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="beginPhase" type="xsd:string"/>
                    <xsd:element name="beginOffset" type="timeIntervalType"/>
                    <xsd:element name="endPhase" type="xsd:string"/>
                    <xsd:element name="endOffset" type="timeIntervalType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:complexType name="rMeanType">
        <xsd:complexContent>
            <xsd:extension base="seismogramProcessType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:complexType name="rTrendType">
        <xsd:complexContent>
            <xsd:extension base="seismogramProcessType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:complexType name="responseGainProcessorType">
        <xsd:complexContent>
            <xsd:extension base="seismogramProcessType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:complexType name="sacSeismogramProcessType">
        <xsd:complexContent>
            <xsd:extension base="seismogramProcessType">
                <xsd:sequence>
                    <xsd:element name="dataDirectory" type="xsd:string"/>
                    <xsd:element name="eventDirLabel" type="eventLabelType" minOccurs="0" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="statusProcessType" abstract="true" >
        <xsd:complexContent>
            <xsd:extension base="subsetterType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="HTMLStatusProcessType">
        <xsd:complexContent>
            <xsd:extension base="statusProcessType">
                <xsd:sequence>
                    <xsd:element name="filename" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    
    <xsd:complexType name="eventLabelType" mixed="true" >
        <xsd:all>
           <xsd:element name="separator" type="xsd:string" minOccurs="0" />
           <xsd:element name="feRegionName" >
              <xsd:complexType />
           </xsd:element>
           <xsd:element name="feRegionNumber" >
              <xsd:complexType />
           </xsd:element>
           <xsd:element name="depth" >
              <xsd:complexType />
           </xsd:element>
           <xsd:element name="magnitude" >
              <xsd:complexType />
           </xsd:element>
           <xsd:element name="latitude" >
              <xsd:complexType />
           </xsd:element>
           <xsd:element name="longitude" >
              <xsd:complexType />
           </xsd:element>
           <xsd:element name="originTime" type="xsd:string" />
        </xsd:all>
    </xsd:complexType >

    <xsd:complexType name="breqfastAvailableDataType">
        <xsd:complexContent>
            <xsd:extension base="availableDataType">
                <xsd:sequence>
                    <xsd:element name="dataDirectory" type="xsd:string"/>
                    <xsd:element name="label" type="eventLabelType" minOccurs="0" />
                    <xsd:element name="name" type="xsd:string"/>
                    <xsd:element name="inst" type="xsd:string"/>
                    <xsd:element name="mail" type="xsd:string"/>
                    <xsd:element name="email" type="xsd:string"/>
                    <xsd:element name="phone" type="xsd:string"/>
                    <xsd:element name="fax" type="xsd:string"/>
                    <xsd:element name="media" type="xsd:string"/>
                    <xsd:element name="altmedia1" type="xsd:string"/>
                    <xsd:element name="altmedia2" type="xsd:string"/>
                    <xsd:element name="quality" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    

    <xsd:complexType name="breqfastRequestSubsetterType">
        <xsd:complexContent>
            <xsd:extension base="requestSubsetterType">
                <xsd:sequence>
                    <xsd:element name="dataDirectory" type="xsd:string"/>
                    <xsd:element name="label" type="eventLabelType" minOccurs="0" />
                    <xsd:element name="name" type="xsd:string"/>
                    <xsd:element name="inst" type="xsd:string"/>
                    <xsd:element name="mail" type="xsd:string"/>
                    <xsd:element name="email" type="xsd:string"/>
                    <xsd:element name="phone" type="xsd:string"/>
                    <xsd:element name="fax" type="xsd:string"/>
                    <xsd:element name="media" type="xsd:string"/>
                    <xsd:element name="altmedia1" type="xsd:string"/>
                    <xsd:element name="altmedia2" type="xsd:string"/>
                    <xsd:element name="quality" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- ELEMENT DECLARATIONS -->
    
    <!-- ELEMENT DECLARATIONS FOR EVENT STATION TYPE -->
    <xsd:element name="eventStation" type="eventStationType" abstract="true"/>
    <xsd:element name="distanceRange" type="distanceRangeType" substitutionGroup="eventStation"/>
    <xsd:element name="embeddedOriginSubsetter" type="embeddedOriginSubsetterType" substitutionGroup="eventStation"/>
    <xsd:element name="embeddedStationSubsetter" type="embeddedStationSubsetterType" substitutionGroup="eventStation"/>
    <xsd:element name="azimuthRange" type="azimuthRangeType" substitutionGroup="eventStation"/>
    <xsd:element name="backAzimuthRange" type="backAzimuthRangeType" substitutionGroup="eventStation"/>
    <xsd:element name="linearDistanceMagnitudeRange" type="linearDistanceMagnitudeRangeType" substitutionGroup="eventStation"/>
    
    <xsd:element name="phaseRelativeAbsolute" type="phaseRelativeAbsoluteAbstractType" abstract="true"/>
    <xsd:element name="relative" type="phaseInteractionRelativeType" substitutionGroup="phaseRelativeAbsolute"/>
    <xsd:element name="absolute" type="phaseInteractionAbsoluteType" substitutionGroup="phaseRelativeAbsolute"/>
    <xsd:element name="phaseInteraction" type="phaseInteractionType" substitutionGroup="eventStation"/>
    <xsd:element name="phaseExists" type="phaseExistsType" substitutionGroup="eventStation"/>
    
    <xsd:element name="eventStationAND" type="eventStationANDType" substitutionGroup="eventStation"/>
    <xsd:element name="eventStationOR" type="eventStationORType" substitutionGroup="eventStation"/>
    <xsd:element name="eventStationXOR" type="eventStationXORType" substitutionGroup="eventStation"/>
    <xsd:element name="eventStationNOT" type="eventStationNOTType" substitutionGroup="eventStation"/>
    
    <!-- ELEMENT DECLARATIONS FOR EVENT CHANNEL TYPE -->
    <xsd:element name="eventChannel" type="eventChannelType" abstract="true"/>
    <xsd:element name="embeddedEventStation" type="embeddedEventStationType" substitutionGroup="eventChannel"/>
    <xsd:element name="embeddedChannelID" type="embeddedChannelIDType" substitutionGroup="eventChannel"/>
    <xsd:element name="embeddedChannel" type="embeddedChannelType" substitutionGroup="eventChannel"/>
    <xsd:element name="eventChannelAND" type="eventChannelANDType" substitutionGroup="eventChannel"/>
    <xsd:element name="eventChannelOR" type="eventChannelORType" substitutionGroup="eventChannel"/>
    <xsd:element name="eventChannelXOR" type="eventChannelXORType" substitutionGroup="eventChannel"/>
    <xsd:element name="eventChannelNOT" type="eventChannelNOTType" substitutionGroup="eventChannel"/>
    
    <!-- ELEMENT DECLARATIONS FOR DATA CENTER TYPE -->
    <xsd:element name="dataCenter" type="dataCenterType" abstract="true"/>
    <xsd:element name="fixedDataCenter" type="fixedDataCenterType" substitutionGroup="dataCenter"/>
    
    <!-- ELEMENT DECLARATIONS FOR REQUEST GENERATOR TYPE -->
    <xsd:element name="requestGenerator" type="requestGeneratorType" abstract="true"/>
    <xsd:element name="phaseRequest" type="phaseRequestType" substitutionGroup="requestGenerator"/>
    
    <!-- ELEMENT DECLARATIONS FOR REQUEST SUBSETTEROR TYPE -->
    <xsd:element name="requestSubsetter" type="requestSubsetterType" abstract="true"/>
    <xsd:element name="requestSubsetterAND" type="requestSubsetterANDType" substitutionGroup="requestSubsetter"/>
    <xsd:element name="requestSubsetterOR" type="requestSubsetterORType" substitutionGroup="requestSubsetter"/>
    <xsd:element name="requestSubsetterXOR" type="requestSubsetterXORType" substitutionGroup="requestSubsetter"/>
    <xsd:element name="requestSubsetterNOT" type="requestSubsetterNOTType" substitutionGroup="requestSubsetter"/>
    <xsd:element name="breqFastRequestSubsetter" type="breqfastRequestSubsetterType" substitutionGroup="requestSubsetter"/>

    <!-- ELEMENT DECLARATIONS FOR AVAILABLE DATA TYPE -->
    <xsd:element name="availableData" type="availableDataType" abstract="true"/>
    <xsd:element name="nogaps" type="nogapsType" substitutionGroup="availableData"/>
    <xsd:element name="fullCoverage" type="fullCoverageType" substitutionGroup="availableData"/>
    <xsd:element name="someCoverage" type="someCoverageType" substitutionGroup="availableData"/>
    <xsd:element name="availableDataAND" type="availableDataANDType" substitutionGroup="availableData"/>
    <xsd:element name="availableDataOR" type="availableDataORType" substitutionGroup="availableData"/>
    <xsd:element name="availableDataXOR" type="availableDataXORType" substitutionGroup="availableData"/>
    <xsd:element name="availableDataNOT" type="availableDataNOTType" substitutionGroup="availableData"/>
    <xsd:element name="breqFastAvailableData" type="breqfastAvailableDataType" substitutionGroup="availableData"/>

    <!-- ELEMENT DECLARATIONS FOR SEISMOGRAM TYPE -->
    <xsd:element name="seismogram" type="seismogramType" abstract="true"/>
    
    <!-- ELEMENT DECLARATIONS FOR WAVE FORM TYPE -->
    <xsd:element name="seismogramProcess" type="seismogramProcessType" abstract="true"/>
    
    <!-- element representing the process -->
    <xsd:element name="printlineSeismogramProcess" type="printLineSeismogramProcessorType" substitutionGroup="seismogramProcess"/>
    <xsd:element name="sacFileProcessor" type="sacSeismogramProcessType" substitutionGroup="seismogramProcess"/>
    <xsd:element name="responseGainProcessor" type="responseGainProcessorType" substitutionGroup="seismogramProcess"/>
    <xsd:element name="phaseCut" type="phaseCutType" substitutionGroup="seismogramProcess"/>
    <xsd:element name="rMean" type="rMeanType" substitutionGroup="seismogramProcess"/>
    <xsd:element name="rTrend" type="rTrendType" substitutionGroup="seismogramProcess"/>
    <xsd:element name="externalSeismogramProcess" type="externalSeismogramProcessType" substitutionGroup="seismogramProcess"/>
    
    <xsd:element name="statusProcess" type="statusProcessType" abstract="true"/>
    <xsd:element name="HTMLStatusProcessor" type="HTMLStatusProcessType"  substitutionGroup="statusProcess"/>

    <xsd:complexType name="localSeismogramArmType">
        <xsd:complexContent>
            <xsd:extension base="armType">
                <xsd:sequence>
                    <xsd:element ref="eventChannel"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="requestGenerator"  minOccurs="1" maxOccurs="1"/>
                    <xsd:element ref="requestSubsetter"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="dataCenter"  minOccurs="1" maxOccurs="1"/>
                    <xsd:element ref="availableData"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="seismogram" minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="seismogramProcess" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:element name="localSeismogramArm" type="localSeismogramArmType"/>

    <xsd:complexType name="waveFormArmType">
        <xsd:complexContent>
            <xsd:extension base="armType">
                <xsd:sequence>
                    <xsd:element ref="eventStation"  minOccurs="0" maxOccurs="1"/>
                    <xsd:element ref="localSeismogramArm"/>

                    <xsd:element ref="statusProcess" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    
    <xsd:element name="waveFormArm" type="waveFormArmType"/>
    
    
</xsd:schema>
