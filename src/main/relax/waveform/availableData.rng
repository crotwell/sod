<?xml version="1.0" encoding="UTF-8"?>
<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
    xmlns="http://relaxng.org/ns/structure/1.0" xmlns:xsd="http://http://www.w3.org/2001/XMLSchema">
    <include href="../base/include/externalClass.rng"/>
    <include href="../base/include/quantity.rng"/>
    <start>
        <ref name="availableData"/>
    </start>
    <include href="../base/include/eventLabel.rng"/>
    <define name="availableData">
        <choice>
            <xsd:annotation>
                <summary>Ingredients for subsetting based on the availability of data</summary>
                <description>Before SOD asks the data center to send it data, it asks the data
                    center if it has data for the time range generated by the request generator.
                    These tactics allow decisions to be made based on the server's response.</description>
                <velocity>#waveformArmPage()</velocity>
            </xsd:annotation>
            <ref name="fullCoverage"/>
            <ref name="postEventWait"/>
            <ref name="noGaps"/>
            <ref name="someCoverage"/>
            <ref name="subrequestCoverage"/>
            <ref name="percentCoverage"/>
            <ref name="availableDataAND"/>
            <ref name="availableDataOR"/>
            <ref name="availableDataNOT"/>
            <ref name="jythonAvailableData"/>
            <ref name="externalAvailable"/>
            <ref name="printlineAvailableDataProcess"/>
        </choice>
    </define>
    <define name="availableDataAND">
        <element name="availableDataAND">
            <xsd:annotation>
                <summary>Matches all enclosed AvailableData subsetters</summary>
                <description>The output is the logical AND of the outputs of all included
                    AvailableData subsetters. This means that it will evaluate to true only if all
                    the enclosed AvailableData subsetters evaluate to true. The subsetters after the
                    first false outputted are not evaluated.</description>
                <example>
                    <availableDataAND>
                        <noGaps/>
                        <fullCoverage/>
                    </availableDataAND>
                </example>
            </xsd:annotation>
            <oneOrMore>
                <ref name="availableData"/>
            </oneOrMore>
        </element>
    </define>
    <define name="availableDataOR">
        <element name="availableDataOR">
            <xsd:annotation>
                <summary>Matches at least one enclosed AvailableData subsetter</summary>
                <description>The output is the logical OR of the outputs of all included
                    AvailableData subsetters. This means that it will evaluate to true if at least
                    one of the enclosed AvailableData subsetters evaluate to true. The subsetters
                    after the first true outputted are not evaluated.</description>
                <example>
                    <availableDataOR>
                        <noGaps/>
                        <fullCoverage/>
                    </availableDataOR>
                </example>
            </xsd:annotation>
            <oneOrMore>
                <ref name="availableData"/>
            </oneOrMore>
        </element>
    </define>
    <define name="availableDataNOT">
        <element name="availableDataNOT">
            <xsd:annotation>
                <summary>Matches the negated output of the enclosed AvailableData subsetter</summary>
                <description>The output is the logical NOT of the output of the enclosed
                    AvailableData subsetter. This means that it will evaluate to false if the
                    enclosed AvailableData subsetter evaluates to true, and vice versa.</description>
                <example>
                    <availableDataNOT>
                        <noGaps/>
                    </availableDataNOT>
                </example>
            </xsd:annotation>
            <ref name="availableData"/>
        </element>
    </define>
    <define name="noGaps">
        <element name="noGaps">
            <xsd:annotation>
                <summary>Accepts data only if it has no gaps</summary>
                <description>If the server says the data it has is continuous, this passes</description>
            </xsd:annotation>
            <empty/>
        </element>
    </define>
    <define name="fullCoverage">
        <element name="fullCoverage">
            <xsd:annotation>
                <summary>Accepts data only if it spans the entire generated request</summary>
            </xsd:annotation>
            <empty/>
        </element>
    </define>
    <define name="someCoverage">
        <element name="someCoverage">
            <xsd:annotation>
                <summary>Accepts data if it spans some of the generated request</summary>
            </xsd:annotation>
            <empty/>
        </element>
    </define>
    <define name="subrequestCoverage">
        <element name="subrequestCoverage">
            <xsd:annotation>
                <summary>Accepts data if it matches a request generated by this subsetter</summary>
                <description>This subsetter generates a new request with the specified request generator.  If an availableData
                subsetter is defined in this element, it is used to check the generated request.  If none is specified 
                fullCoverage is used.</description>
            </xsd:annotation>
            <externalRef href="requestGenerator.rng"/>
            <optional>
                <ref name="availableData"/>
            </optional>
        </element>
    </define>
    <define name="percentCoverage">
        <element name="percentCoverage">
            <xsd:annotation>
                <summary>Accepts data if it spans the specified percentage of the generated request</summary>
            </xsd:annotation>
           <data type="double"/>
        </element>
    </define>
    <define name="postEventWait">
        <element name="postEventWait">
            <xsd:annotation>
                <summary>Ensure good data after a fresh event</summary>
                <description>When running SOD in realtime mode, this tells it how long to wait after
                    a fresh event before trying to get data. This allows for data that isn't
                    immediately available to be submitted to the seismogram servers. For more
                    information look at the <a href="../../../documentation/realtime.html">Realtime Run
                    Considerations</a> for more details on how to use this subsetter in conjunction
                    with the other availableData subsetters.</description>
            </xsd:annotation>
            <ref name="time"/>
        </element>
    </define>
    <define name="externalAvailable">
        <element name="externalAvailableDataSubsetter">
            <xsd:annotation>
                <summary>Use an AvailableData subsetter external to SOD</summary>
                <description>$externalAvailableDataSubsetterInfo.getRelaxHTML('../../../')</description>
                <example>
                    <externalAvailableDataSubsetter>
                        <classname>edu.somewhere.seis.sodExt.subsetter.availableData.MyAvailableDataSubsetter</classname>
                    </externalAvailableDataSubsetter>
                </example>
            </xsd:annotation>
            <ref name="externalClass"/>
        </element>
    </define>
    <define name="printlineAvailableDataProcess">
        <element name="printlineAvailableDataProcess">
            <xsd:annotation>
                <summary>Print out information about the data the server reported as available</summary>
                <description>This prints information regarding the availability of seismic data configured with template to
                the file in filename, or to standard out if filename is left out.
                Filename and template are
                    <a href="../../templates.html">Velocity templates</a>.  Both templates contain a list of
                    <a href="../../templateTypes.html#request">request</a> named originalRequests that are the requests generated by your request generator,
                    another list of <a href="../../templateTypes.html#request">request</a> named availableRequests that are the requests the server said were available for retrieval, 
                    <a href="../../templateTypes.html#site">site</a>, <a href="../../templateTypes.html#station">station</a>
                    and <a href="../../templateTypes.html#net">net</a> variables.
                    Template defaults to "Got $availableRequests.size()".
                </description>
            </xsd:annotation>
            <interleave>
          <optional>  <element name="template">
              <text/></element></optional>
            <optional>
                <element name="filename">
                    <text/></element></optional>
            </interleave>
        </element>
    </define>
    <define name="jythonAvailableData">
        <element name="jythonAvailableDataSubsetter">
            <xsd:annotation>
                <summary>Runs an externally defined Jython available data</summary>
                <description>$jythonWaveformProcessInfo.getRelaxHTML('../../../')</description>
                <example>
                    <jythonAvailableDataSubsetter>
                        <module>helloSod</module>
                        <class>helloSod</class>
                        <dataDirectory>PutItHere</dataDirectory>
                        <extraParam>1.7</extraParam>
                    </jythonAvailableDataSubsetter>
                </example>
            </xsd:annotation>
            
            <choice>
                <group>
                    <element name="module">
                        <data type="string"/>
                    </element>
                    <element name="class">
                        <data type="string"/>
                    </element>
                    <zeroOrMore>
                        <externalRef href="../base/externalRef/anyXML.rng"/>
                    </zeroOrMore>
                </group>
                <element name="inline">
                    <data type="string"/>
                </element>
            </choice>
        </element>
    </define>
</grammar>
