<?xml version="1.0" encoding="UTF-8"?>
<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
    xmlns="http://relaxng.org/ns/structure/1.0" xmlns:xsd="http://http://www.w3.org/2001/XMLSchema">
    <include href="../base/include/externalClass.rng"/>
    <start>
        <ref name="eventChannel"/>
    </start>
    <define name="eventChannel">
        <choice>
            <xsd:annotation>
                <summary>Ingredients for selecting combinations of channels and events</summary>
                <velocity>#waveformArmPage()</velocity>
            </xsd:annotation>
            <ref name="bestChannelAtStation"/>
            <ref name="embeddedEventStation"/>
            <ref name="embeddedChannel"/>
            <ref name="eventChannelAND"/>
            <ref name="eventChannelOR"/>
            <ref name="eventChannelNOT"/>
            <ref name="jythonEventChannel"/>
            <ref name="eventChannelScript"/>
            <ref name="external"/>
        </choice>
    </define>
    <define name="channel">
        <externalRef href="../network/channel.rng"/>
    </define>
    <define name="eventChannelPlus">
        <choice>
            <ref name="eventChannel"/>
            <externalRef href="eventStation.rng"/>
            <ref name="channel"/>
            <externalRef href="../event/origin.rng"/>
        </choice>
    </define>
    <define name="bestChannelAtStation">
        <element name="bestChannelAtStation">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Picks the best channels for a station.</summary>
                    <description>Picks the best channels at a station, avoiding processing 00.BHZ and 01.BHZ at the same station. 
                    This can often happen when there are multiple sensors at a station, perhaps a surface seismometer and
                    a borehole seismometer. The processor decides on best based on a simple hueristic based on site
                    and channel codes. The default is:<br/>
                    site Code Heuristic = "00", "  ", "01"<br/>
                    gain Code Heuristic = "H", "L" <br/>
                    band Code Heuristic = "B", "H", "L", "M", "S", "V", "E", "U" <br/>
                    orientation Codes = "Z", "N", "E", "1", "2", "3", "U", "V", "W" <br/>
                    All three components are considered equally best, so in a typical broadband station
                    the best channels might be 00.BHE, 00.BHN, 00.BHZ, and this subsetter will pass
                    all three, while failing every other channel at this station.
                    <br/>
                    See edu.sc.seis.fissuresUtil.chooser.BestChannelUtil for the underlying code.
                    The reason this is an event-channel subsetter is because the "best" channel
                    at a station may change with time, for example a short period only station may
                    be replaced by a broadband seismometer. Before the switch SHZ may be the best
                    vertical, but afterwards it would be BHZ and SHZ would no longer exist.
                    </description>
                </xsd:documentation>
            </xsd:annotation>
            <zeroOrMore>
                <element name="siteCodeHeuristic">
                    <data type="string"/>
                </element>
            </zeroOrMore>
            <zeroOrMore>
                <element name="gainCodeHeuristic">
                    <data type="string"/>
                </element>
            </zeroOrMore>
            <zeroOrMore>
                <element name="bandCodeHeuristic">
                    <data type="string"/>
                </element>
            </zeroOrMore>
            <zeroOrMore>
                <element name="orientationCodeHeuristic">
                    <data type="string"/>
                </element>
            </zeroOrMore>
        </element>
    </define>
    <define name="embeddedEventStation">
        <element name="embeddedEventStation">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Allows an event station subsetter to be embedded within a event
                        channel subsetter</summary>
                    <description>Allows an event station subsetter to be embedded within a event
                        channel subsetter. The is most often used within an EventChannel logical
                        subsetter.</description>
                    <example>
                        <embeddedEventStation>
                            <distanceRange>
                                <unit>DEGREE</unit>
                                <min>40</min>
                            </distanceRange>
                        </embeddedEventStation>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <externalRef href="eventStation.rng"/>
        </element>
    </define>
    <define name="embeddedChannel">
        <element name="embeddedChannel">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Allows a Channel subsetter to be embedded within an EventChannel</summary>
                    <description>Allows a Channel subsetter to be embedded within an EventChannel.
                        This is most often used within a EventChannel logical.</description>
                    <example>
                        <embeddedChannel>
                            <sampling>
                                <min>1</min>
                                <max>40</max>
                                <interval>
                                    <unit>SECOND</unit>
                                    <value>1</value>
                                </interval>
                            </sampling>
                        </embeddedChannel>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <ref name="channel"/>
        </element>
    </define>
    <define name="eventChannelAND">
        <element name="eventChannelAND">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Matches all enclosed EventChannel subsetters</summary>
                    <description>The output is the logical AND of the outputs of all included EventChannel subsetters. This
                        means that it will evaluate to true only if all the enclosed EventChannel subsetters evaluate to
                        true. The subsetters after the first false outputted are not evaluated.</description>
                    <example>
                        <eventChannelAND>
                            <embeddedEventStation>
                                <distanceRange>
                                    <unit>DEGREE</unit>
                                    <min>40</min>
                                </distanceRange>
                            </embeddedEventStation>
                            <embeddedChannel>
                                <bandCode>B</bandCode>
                            </embeddedChannel>
                        </eventChannelAND>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <oneOrMore>
                <ref name="eventChannelPlus"/>
            </oneOrMore>
        </element>
    </define>
    <define name="eventChannelOR">
        <element name="eventChannelOR">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Matches at least one enclosed EventChannel subsetter</summary>
                    <description>The output is the logical OR of the outputs of all included EventChannel subsetters. This
                        means that it will evaluate to true if at least one of the enclosed EventChannel subsetters evaluate
                        to true. The subsetters after the first true outputted are not evaluated.</description>
                    <example>
                        <eventChannelOR>
                            <embeddedEventStation>
                                <distanceRange>
                                    <unit>DEGREE</unit>
                                    <min>40</min>
                                </distanceRange>
                            </embeddedEventStation>
                            <embeddedChannel>
                                <bandCode>B</bandCode>
                            </embeddedChannel>
                        </eventChannelOR>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <oneOrMore>
                <ref name="eventChannelPlus"/>
            </oneOrMore>
        </element>
    </define>
    <define name="eventChannelNOT">
        <element name="eventChannelNOT">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Matches the negated output of the enclosed EventChannel subsetter</summary>
                    <description>The output is the logical NOT of the output of the enclosed EventChannel subsetter. This
                        means that it will evaluate to false if the enclosed EventChannel subsetter evaluates to true, and
                        vice versa.</description>
                    <example>
                        <eventChannelNOT>
                            <embeddedEventStation>
                                <distanceRange>
                                    <unit>DEGREE</unit>
                                    <min>40</min>
                                </distanceRange>
                            </embeddedEventStation>
                        </eventChannelNOT>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <ref name="eventChannelPlus"/>
        </element>
    </define>
    <define name="jythonEventChannel">
        <element name="jythonEventChannelSubsetter">
            <xsd:annotation>
                <summary>Runs an externally defined Jython event-channel subsetter</summary>
                <description>$jythonWaveformProcessInfo.getRelaxHTML('../../../')</description>
                <example>
                    <jythonEventChannelSubsetter>
                        <module>helloSod</module>
                        <class>helloSod</class>
                        <dataDirectory>PutItHere</dataDirectory>
                        <extraParam>1.7</extraParam>
                    </jythonEventChannelSubsetter>
                </example>
            </xsd:annotation>
            
            <choice>
                <group>
                    <element name="module">
                        <data type="string"/>
                    </element>
                    <element name="class">
                        <data type="string"/>
                    </element>
                    <zeroOrMore>
                        <externalRef href="../base/externalRef/anyXML.rng"/>
                    </zeroOrMore>
                </group>
                <element name="inline">
                    <data type="string"/>
                </element>
            </choice>
        </element>
    </define>
    <define name="eventChannelScript">
        <element name="eventChannelScript">
            <xsd:annotation>
                <summary>Runs a script eventChannel subsetter</summary>
                <description>Runs a eventChannel subsetter script via JSR223. The event is put as "event" and the channel
                as "channel". The channel and event objects are a
                VelocityChannel and VelocityEvent, respectively, the same classes used in the <a href="../../templates.html">templates</a> for the printlineChannelProcess.
                See the <a href="../../scripting.html">scripting tutorial</a> for more information on inlining scripts
                into a SOD recipe.</description>
                <example>
                    <eventChannelScript type="jython">
                    result = True
                    
                    </eventChannelScript>
                </example>
            </xsd:annotation>
            <attribute name="type">
                    <text/>
            </attribute>
            <data type="string"/>
        </element>
    </define>
    <define name="external">
        <element name="externalEventChannelSubsetter">
            <xsd:annotation>
                <summary>Use an EventChannel subsetter external to SOD</summary>
                <description>$externalEventChannelSubsetterInfo.getRelaxHTML('../../../')</description>
                <example>
                    <externalEventChannelSubsetter>
                        <classname>edu.somewhere.seis.sodExt.subsetter.eventChannel.MyEventChannelSubsetter</classname>
                    </externalEventChannelSubsetter>
                </example>
            </xsd:annotation>
            <ref name="externalClass"/>
        </element>
    </define>
</grammar>
