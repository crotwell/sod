<?xml version="1.0" encoding="UTF-8"?>
<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
    xmlns="http://relaxng.org/ns/structure/1.0" xmlns:xsd="http://http://www.w3.org/2001/XMLSchema">
    <include href="../base/include/externalClass.rng"/>
    <start>
        <ref name="vectorRequest"/>
    </start>
    <define name="vectorRequest">
        <choice>
            <xsd:annotation>
                <summary>Tactics for handling vector data requests</summary>
                <velocity>#waveformVectorArmPage()</velocity>
            </xsd:annotation>
            <ref name="ANDRequestWrapper"/>
            <ref name="ORRequestWrapper"/>
            <ref name="vectorRequestAND"/>
            <ref name="vectorRequestOR"/>
            <ref name="vectorRequestNOT"/>
            <ref name="vectorRequestScript"/>
            <ref name="jythonVectorRequestSubsetter"/>
            <ref name="external"/>
            <externalRef href="requestSubsetter.rng"/>
        </choice>
    </define>
    <define name="ANDRequestWrapper">
        <element name="ANDRequestWrapper">
            <xsd:annotation>
                <summary>Allows an event channel request subsetter to be embedded within a event
                    vector request subsetter</summary>
                <description>Allows an event channel request subsetter to be embedded within a event
                    channelgroup request subsetter. The result is the AND of result of all the
                    individual per channel request subsetters. The is most often used within the
                    motion vector arm.</description>
                <example>
                    <ANDRequestWrapper>
                        <requestPrint/>
                    </ANDRequestWrapper>
                </example>
            </xsd:annotation>
            <externalRef href="requestSubsetter.rng"/>
        </element>
    </define>
    <define name="ORRequestWrapper">
        <element name="ORRequestWrapper">
            <xsd:annotation>
                <summary>Allows an event channel request subsetter to be embedded within a event
                    vector request subsetter</summary>
                <description>Allows an event channel request subsetter to be embedded within a event
                    channelgroup request subsetter. The result is the OR of the result of all the
                    individual per channel request subsetters. The is most often used within the
                    motion vector arm.</description>
                <example>
                    <ORRequestWrapper>
                        <requestPrint/>
                    </ORRequestWrapper>
                </example>
            </xsd:annotation>
            <externalRef href="requestSubsetter.rng"/>
        </element>
    </define>
    <define name="vectorRequestAND">
        <element name="vectorRequestAND">
            <xsd:annotation>
                <summary>Matches all enclosed requests</summary>
                <description>The output is the logical AND of the outputs of all included requests.
                    This means that it will evaluate to true only if all the enclosed requests
                    evaluate to true. The requests after the first false outputted are not
                    evaluated.</description>
            </xsd:annotation>
            <oneOrMore>
                <ref name="vectorRequest"/>
            </oneOrMore>
        </element>
    </define>
    <define name="vectorRequestOR">
        <element name="vectorRequestOR">
            <xsd:annotation>
                <summary>Matches at least one enclosed request</summary>
                <description>The output is the logical OR of the outputs of all included requests.
                    This means that it will evaluate to true if at least one of the enclosed
                    requests evaluates to true. The requests after the first true outputted are not
                    evaluated.</description>
            </xsd:annotation>
            <oneOrMore>
                <ref name="vectorRequest"/>
            </oneOrMore>
        </element>
    </define>
    <define name="vectorRequestNOT">
        <element name="vectorRequestNOT">
            <xsd:annotation>
                <summary>Matches the negated output of the enclosed request</summary>
                <description>The output is the logical NOT of the output of the included request.
                    This mean that it will evaluate to false if the enclosed request evaluates to
                    true, and vice versa.</description>
            </xsd:annotation>
            <ref name="vectorRequest"/>
        </element>
    </define>
    <define name="vectorRequestScript">
        <element name="vectorRequestScript">
            <xsd:annotation>
                <summary>Runs a script vector request subsetter</summary>
                <description>Runs a vector request subsetter script via JSR223. The event is put as "event" and the channel
                as "channel". The channel and event objects are a
                VelocityChannel and VelocityEvent, respectively, the same classes used in the <a href="../../templates.html">templates</a> for the printlineChannelProcess.
                The request is put as "request" as a two dimensional array of RequestFilter objects.
                See the <a href="../../scripting.html">scripting tutorial</a> for more information on inlining scripts
                into a SOD recipe.</description>
                <example>
                    <requestScript type="jython">
                        result = len(original) == len(available)
                    
                    </requestScript>
                </example>
            </xsd:annotation>
            <attribute name="type">
                    <text/>
            </attribute>
            <data type="string"/>
        </element>
    </define>
    <define name="jythonVectorRequestSubsetter">
        <element name="jythonVectorRequestSubsetter">
            <xsd:annotation>
                <summary>Runs an externally defined Jython vector request subsetter</summary>
                <description>$jythonWaveformProcessInfo.getRelaxHTML('../../../')</description>
                <example>
                    <jythonVectorRequestSubsetter>
                        <module>helloSod</module>
                        <class>helloSod</class>
                        <dataDirectory>POND_II</dataDirectory>
                        <extraParam>1.7</extraParam>
                    </jythonVectorRequestSubsetter>
                </example>
            </xsd:annotation>
            
            <choice>
                <group>
                    <element name="module">
                        <data type="string"/>
                    </element>
                    <element name="class">
                        <data type="string"/>
                    </element>
                    <zeroOrMore>
                        <externalRef href="../base/externalRef/anyXML.rng"/>
                    </zeroOrMore>
                </group>
                <element name="inline">
                    <data type="string"/>
                </element>
            </choice>
        </element>
    </define>
    <define name="external">
        <element name="externalVectorRequest">
            <xsd:annotation>
                <summary>Use a VectorRequest external to SOD</summary>
                <description>$externalVectorRequestInfo.getRelaxHTML('../../../')</description>
                <example>
                    <externalVectorRequest>
                        <classname>edu.somewhere.seis.sodExt.subsetter.waveformVector.request.MyVectorRequest</classname>
                    </externalVectorRequest>
                </example>
            </xsd:annotation>
            <ref name="externalClass"/>
        </element>
    </define>
</grammar>
