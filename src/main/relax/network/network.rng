<?xml version="1.0" encoding="UTF-8"?>
<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
    xmlns="http://relaxng.org/ns/structure/1.0" xmlns:xsd="http://http://www.w3.org/2001/XMLSchema">
    <include href="../base/include/externalClass.rng"/>
    <start>
        <ref name="network"/>
    </start>
    <include href="../base/include/timeRange.rng"/>
    <define name="network">
        <choice>
            <xsd:annotation>
                <summary>Tactics for selecting networks</summary>
                <description>All of the subsetters that make decisions on the contents of a
                    network.</description>
                <velocity>#networkArmPage()</velocity>
            </xsd:annotation>
            <ref name="code"/>
            <ref name="name"/>
            <ref name="owner"/>
            <ref name="effectiveTimeOverlap"/>
            <ref name="AND"/>
            <ref name="OR"/>
            <ref name="NOT"/>
            <ref name="externalNetworkSubsetter"/>
            <ref name="temporaryNetwork"/>
            <ref name="printlineNetworkProcess"/>
            <ref name="jythonNetworkSubsetter"/>
        </choice>
    </define>
    <define name="code">
        <element name="networkCode">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Matches a given network code</summary>
                    <description> A network is accepted if its network code matches the given code
                        exactly. If a two digit year is appended to the code, the network will be checked
                        that its start year matches the given one in addition to checking against the
                        actual network code.</description>
                </xsd:documentation>
            </xsd:annotation>
            <data type="string">
                <xsd:annotation>
                    <example>IC</example>
                </xsd:annotation>
            </data>
        </element>
    </define>
    <define name="temporaryNetwork">
        <element name="temporaryNetwork">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Matches networks starting with X, Y and Z</summary>
                </xsd:documentation>
            </xsd:annotation>
            <empty/>
        </element>
    </define>
    <define name="name">
        <element name="networkName">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary> Matches the name of a network</summary>
                    <description>Compares the name of a network to the value given here and if they
                        match exactly, the network is accepted. </description>
                </xsd:documentation>
            </xsd:annotation>
            <data type="string">
                <xsd:annotation>
                    <example>Global Seismograph Network (GSN - IRIS/USGS)</example>
                </xsd:annotation>
            </data>
        </element>
    </define>
    <define name="owner">
        <element name="networkOwner">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Matches the owner of a network</summary>
                    <description>Matches the owner of a network. This is a simple string comparison,
                        and so care must be taken for it to be useful. </description>
                </xsd:documentation>
            </xsd:annotation>
            <data type="string">
                <xsd:annotation>
                    <example>Scripps Institution of Oceanography</example>
                </xsd:annotation>
            </data>
        </element>
    </define>
    <define name="effectiveTimeOverlap">
        <element name="networkEffectiveTimeOverlap">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Matches if the network exists during given time range.</summary>
                    <description>Matches if the network exists during given time range. This is generally used
                    to avoid processing networks that did not yet exist, or were deactivated before a time range of interest.
                    By default, SOD uses a networkEffectiveTimeOverlap configured with the event arm's time range.  
                    If all you want to do is make sure your networks are active during 
                    your events, that's already done.</description>
                </xsd:documentation>
            </xsd:annotation>
            <ref name="timeRange"/>
        </element>
    </define>
    <define name="AND">
        <element name="networkAND">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Matches all enclosed Network subsetters</summary>
                    <description>The output is the logical AND of the outputs of all included
                        Network subsetters. This means that it will evaluate to true only if all the
                        enclosed Network subsetters evaluate to true. The subsetters after the first
                        false outputted are not evaluated.</description>
                    <example>
                        <networkAND>
                            <networkOwner>Scripps Institution of Oceanography</networkOwner>
                            <networkEffectiveTimeOverlap>
                                <startTime>20020701T00:00:00.001Z</startTime>
                                <endTime>20021030T00:00:00.001Z</endTime>
                            </networkEffectiveTimeOverlap>
                        </networkAND>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <oneOrMore>
                <ref name="network"/>
            </oneOrMore>
        </element>
    </define>
    <define name="OR">
        <element name="networkOR">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Matches at least one enclosed Network subsetter</summary>
                    <description>The output is the logical OR of the outputs of all included Network
                        subsetters. This means that it will evaluate to true if at least one of the
                        enclosed Network subsetters evaluate to true. The subsetters after the first
                        true outputted are not evaluated.</description>
                    <example>
                        <networkOR>
                            <networkOwner>Scripps Institution of Oceanography</networkOwner>
                            <networkEffectiveTimeOverlap>
                                <startTime>20020701T00:00:00.001Z</startTime>
                                <endTime>20021030T00:00:00.001Z</endTime>
                            </networkEffectiveTimeOverlap>
                        </networkOR>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <oneOrMore>
                <ref name="network"/>
            </oneOrMore>
        </element>
    </define>
    <define name="NOT">
        <element name="networkNOT">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Matches the negated output of the enclosed Network subsetter</summary>
                    <description>The output is the logical NOT of the output of the enclosed Network
                        subsetter. This means that it will evaluate to false if the enclosed Network
                        subsetter evaluates to true, and vice versa.</description>
                </xsd:documentation>
            </xsd:annotation>
            <ref name="network"/>
        </element>
    </define>
    <define name="externalNetworkSubsetter">
        <element name="externalNetworkSubsetter">
            <xsd:annotation>
                <summary>Use a Network subsetter external to SOD</summary>
                <description>$externalNetworkSubsetterInfo.getRelaxHTML('../../../')</description>
                <example>
                    <externalNetworkSubsetter>
                        <classname>edu.somewhere.seis.sodExt.subsetter.network.MyNetworkSubsetter</classname>
                    </externalNetworkSubsetter>
                </example>
            </xsd:annotation>
            <ref name="externalClass"/>
        </element>
    </define>
    <define name="printlineNetworkProcess">
        <element name="printlineNetworkProcess">
            <xsd:annotation>
                <summary>Prints every successful network to the console or to the specified file</summary>
                <description>Prints out each network on a new line. The template and filename elements are both <a
                    href="../../templates.html">Velocity templates</a> containing <a
                            href="../../templateTypes.html#net">net</a> variables. If no template element is given, it defaults
                    to "Network: $net". If no filename is given, the output goes to standard out.</description>
            </xsd:annotation>
            <ref name="externalClass"/>
        </element>
    </define>
    <define name="jythonNetworkSubsetter">
        <element name="jythonNetworkSubsetter">
            <xsd:annotation>
                <summary>Runs an externally defined Jython network subsetter</summary>
                <description>$jythonWaveformProcessInfo.getRelaxHTML('../../../')</description>
                <example>
                    <jythonNetworkSubsetter>
                        <module>helloSod</module>
                        <class>helloSod</class>
                        <dataDirectory>PutItHere</dataDirectory>
                        <extraParam>1.7</extraParam>
                    </jythonNetworkSubsetter>
                </example>
            </xsd:annotation>
            <element name="module">
                <data type="string"/>
            </element>
            <element name="class">
                <data type="string"/>
            </element>
            <zeroOrMore>
                <externalRef href="../base/externalRef/anyXML.rng"/>
            </zeroOrMore>
        </element>
    </define>
</grammar>
