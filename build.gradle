
group = 'edu.sc.seis'
version = '3.0.0beta8'

project.sourceSets {
            relax {
                java {
                    srcDir 'src/main/relax'
                }
            }
        }
        
dependencies {
    compile project(':bag') { transitive = true }
    compile project(':seiswww') { transitive = false }
    compile project(':cormorant') { transitive = true }
    
    compile "jline:jline:0.9.91"
    compile "rngconvUSC:rngconv:20030225"
    compile "msv:msv:20030807"
    compile "msv:isorelax:20030807"
    compile "msv:relaxngDatatype:20030807"
    compile "msv:xsdlib:20030807"
    compile "thaiopensource:jing:20030619"
    compile ("org.apache.velocity:velocity-tools:2.0") {
        exclude group: 'xml-apis',  module: 'xml-apis'
        exclude group: 'org.apache.struts',  module: 'struts-taglib'
        exclude group: 'org.apache.struts',  module: 'struts-tiles'
        exclude group: 'org.apache.struts',  module: 'struts-core'
    }

    compile "edu.sc.seis.mapData:dcwpo_browse:1.0"
    compile "net.sourceforge.javacsv:javacsv:2.0"
    compile "gov.usgs.earthworm:Earthworm:1.0.0svn"
//    runtime "org.codehaus.groovy:groovy:1.7.3"
//    runtime "org.jruby:jruby:1.5.1"
}

dirName = project.name+'-'+version

distFiles = copySpec {

    from('build') {
        include('build.gradle')
        into dirName
    }
    from('build/output') {
        fileMode=0755
        include('bin/**')
        into dirName
    }
    from('build/output') {
        include('lib/**')
        into dirName
    }
    from('.') {
        include('gpl-3.0.txt')
        include('defaultProps')
        include('externalExample/**')
        include('jythonExample/**')
        include('src/**')
        include('lib/**')
        include('etc/**')
        include('gradleWrapper/**')
        include('gradlew')
        include('gradlew.bat')
        exclude('**/*.svn')
        into dirName
    }
    from('scripts') {
        include('cwg.prop')
        into dirName
    }
    from('scripts/tutorial') {
        include('**')
        into dirName+'/recipes'
    }
    from('build') {
        include('doc/**')
        into dirName
    }
}
task tarDist(type: Tar, dependsOn: ['makeScript', 'createBuildScript', 'wrapper', 'copySodSite', 'buildSchema']) {
    compression = Compression.GZIP
    longfile = 'gnu'
    into(dirName) {
        with distFiles
    }
}

task explodeDist(type: Sync, dependsOn: ['makeScript', 'createBuildScript', 'wrapper', 'copySodSite', 'buildSchema']) {
    with distFiles
    into file("$buildDir/explode")
}

def getDExtras() {
    return [ 'seis.name':'sod'+getVersion(), 
                'org.omg.CORBA.ORBSingletonClass':'org.jacorb.orb.ORBSingleton', 
                'python.path':'${LIB}', 
                'java.awt.headless':'true', 
                'org.omg.CORBA.ORBClass':'org.jacorb.orb.ORB', 
                'swing.volatileImageBufferEnabled':'false', 
                'java.endorsed.dirs':'${LIB}/endorsed', 
                'jacorb.connection.client.pending_reply_timeout':'120000',
                'jacorb.home':'.' ,
                'jacorb.log.default.verbosity':'2' ]
}

task makeScript(dependsOn: copyToLib) << { task ->
    dExtras = getDExtras()
    doBat = true
//    ScriptBuilder.create('sod', 'edu.sc.seis.sod.Start', task.project, dExtras:dExtras, yourkit:true)
    ScriptBuilder.create('sod', 'edu.sc.seis.sod.Start', task.project, dExtras:dExtras, bat:true)
    ScriptBuilder.create('bgsod', 'edu.sc.seis.sod.Start', task.project, dExtras:dExtras, bat:doBat, background:true)
    ScriptBuilder.create('find_events', 'edu.sc.seis.sod.tools.find_events', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('find_stations', 'edu.sc.seis.sod.tools.find_stations', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('find_channels', 'edu.sc.seis.sod.tools.find_channels', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('find_seismograms', 'edu.sc.seis.sod.tools.find_seismograms', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('find_responses', 'edu.sc.seis.sod.tools.find_responses', task.project, dExtras:dExtras, bat:doBat)
}

task printRT << { task ->
    configurations.default.each { File f -> println f.path }
}
       


task copySodSite(dependsOn: ['copySchemaDocs', ':seiswww:makeSodSite'], type: Copy) {
    from project.file('../seiswww/build/sod/')
    into project.file('build/doc/')
}
task copySchemaDocs(dependsOn: 'buildSchemaDocs', type: Copy) {
    from project.file('build/velocity/sod/ingredients')
    into project.file('../seiswww/velocity/sod/ingredients/')
}

task buildSchemaDocs(dependsOn: ['buildSchema', 'classes'])  { 
    inputs.dir 'src/main/relax'
    inputs.files 'site/elementPage.vm'
    outDir = project.file('build/velocity/sod/ingredients/')
    outputs.dir outDir
    doLast{
    outDir.mkdirs()
    schemaDocArgs = project.projectDir.path+'/ '+outDir+'/'
    print schemaDocArgs
    cp = configurations.runtime.asPath+":"+project.projectDir.path+"/build/classes/main"
    ant.java(dir:outDir, 
             classname:'edu.sc.seis.sod.validator.documenter.SchemaDocumenter', 
             args:schemaDocArgs,
             fork:true,
             maxmemory:'512m',
             output:'build/ant_java.out',
             classpath:cp) 
    }
}

task buildSchema(dependsOn: 'compileJava')  {
    inputs.dir 'src/main/relax/'
    outputs.files 'src/main/resources/edu/sc/seis/sod/data/sod.rng'
    doLast{
    outDir = project.file('build/output')
    outDir.mkdirs()
    relaxArgs = project.projectDir.path+'/src/main/relax/sod.rng'
    ant.java(dir:outDir, 
             classname:'com.sun.msv.writer.relaxng.Driver', 
             args:relaxArgs,
             maxmemory:'512m',
             fork:true,
             classpath:configurations.runtime.asPath,
             output:project.projectDir.path+'/src/main/resources/edu/sc/seis/sod/data/sod.rng') 
    }
}

assemble.dependsOn(tarDist)
processResources.dependsOn(buildSchema)

