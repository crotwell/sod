
plugins {
  id "edu.sc.seis.version-class" version "1.1.1"
  id "java-library"
  id 'maven-publish'
}
apply plugin: 'eclipse'
apply plugin: 'project-report'

group = 'edu.sc.seis'
version = '3.2.9-SNAPSHOT4'
// also remember to change in sod.Version class

apply plugin:'application'
mainClassName = "edu.sc.seis.sod.Start"


sourceCompatibility = 1.8
targetCompatibility = 1.8

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        myLibrary(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        maven {
            name = 'myRepo'
            url = "file://${buildDir}/repo"
        }
    }
}

repositories {
    mavenLocal()
    maven { url "http://www.seis.sc.edu/software/maven2" }
    mavenCentral()
    maven { url "http://spring-rich-c.sourceforge.net/maven2repository" }
    maven { url "http://oss.sonatype.org/content/groups/public" }
    maven { url "https://repository.jboss.org/nexus/content/repositories/public" }
}

sourceSets {
    relax {
        resources {
            srcDir new File(project.buildDir, 'generated-src/relax/resources')
        }
    }
    makedocs {
        compileClasspath += sourceSets.main.output
    }
}

configurations {
  makedocsImplementation.extendsFrom implementation
}

dependencies {
    compile 'edu.sc.seis:bag:0.1alpha'
//    compile project(':cormorant')

    compile "jline:jline:0.9.94"
    compile "thaiopensource:jing:20091111"
    compile "rngconvUSC:rngconv:20030225"
    compile "de.erichseifert.gral:VectorGraphics2D:0.9"
    compile "de.erichseifert.gral:gral-core:0.9"

    compile ("org.apache.velocity:velocity-tools:2.0") {
        exclude group: 'xml-apis',  module: 'xml-apis'
        exclude group: 'org.apache.struts',  module: 'struts-taglib'
        exclude group: 'org.apache.struts',  module: 'struts-tiles'
        exclude group: 'org.apache.struts',  module: 'struts-core'
        exclude group: 'javax.servlet',  module: 'servlet-api'
    }

    compile "edu.sc.seis.mapData:dcwpo_browse:1.0"
    compile "net.sourceforge.javacsv:javacsv:2.0"
    runtime "org.codehaus.groovy:groovy-all:2.2.2"
//    runtime "org.jruby:jruby:1.7.3
    makedocsImplementation "org.apache.velocity:velocity:1.6.4"
}


def sodVelocity = copySpec {
    from project.file('velocity/sod')
    from new File(project.buildDir, 'generated-src/velocity/sod')
}

task copySodVelocity(type: Sync, dependsOn: 'buildSchemaDocs') {
    group = 'dist'
    with sodVelocity
    def outDir = project.file('build/velocity/sod/')
    into outDir
    doFirst {
        println outDir.mkdirs()
    }
}

task makeSodSite(type: JavaExec, dependsOn: [ copySodVelocity, classes, compileMakedocsJava ] ) {
    jvmArgs  ['-Xmx512m']
    group = 'dist'
    args '--run-once', '-p', 'site/makeSodSite.prop'
    classpath = sourceSets.makedocs.runtimeClasspath
    setMain "edu.sc.seis.seiswww.MakeSite"

//    ant.java(dir:project.projectDir.path,
//             classname:'edu.sc.seis.seiswww.MakeSite',
//             args:'--run-once -p sod.prop',
//             fork:true,
//             classpath: sourceSets.main.runtimeClasspath.asPath,
//             output:project.projectDir.path+'/build/makeSodSite.out')
}

//configurations.all {
//    resolutionStrategy.dependencySubstitution {
//        substitute module("edu.sc.seis:bag") with project(":bag")
//    }
//}

def dirName = project.name+'-'+version

def binDistFiles = copySpec {

    from(configurations.default) {
        into('lib')
    }
    from(configurations.default.allArtifacts.files) {
        into('lib')
    }
    from('build/scripts') {
        fileMode=0755
        include('bin/**')
        include('bat/**')
    }
    from('scripts') {
        include('cwg.prop')
    }
    from('.') {
        include('etc/**')
    }
}

def distFiles = copySpec {
    with(binDistFiles)
    from('.') {
        fileMode=0755
        include('gradlew')
        include('gradlew.bat')
    }
    from('.') {
        include('gpl-3.0.txt')
        include('defaultProps')
        include('externalExample/**')
        include('src/**')
        include('lib/**')
        include('gradle/**')
        exclude('**/*.svn')
    }
    from('scripts') {
        include('tutorial/**')
        include('CMTReadySeismograms.xml')
        include('ammonChannels.xml')
        include('breqfast.xml')
        include('dmcWebService.xml')
        include('preferBroadband.xml')
        include('realtime.xml')
        include('sAndSKSInTanzania.xml')
        include('southAmericanSacFiles.xml')
        include('recfunc_ears.xml')
        include('variableDataWindow.xml')
        include('vector.xml')
        include('weed.xml')
        include('winston.xml')
        into 'recipes'
    }
    from('build') {
        include('doc/**')
        include('build.gradle')
        include('settings.gradle')
    }
    from('build/docs') {
        include('javadoc/**')
        into 'doc/documentation'
    }
}

task tarBin(type: Tar, dependsOn: ['explodeBin']) {
    group = 'dist'
    compression = Compression.GZIP
    into(dirName) {
        with binDistFiles
    }
}


task zipDist(type: Zip, dependsOn: ['explodeDist']) {
    group = 'dist'
    into(dirName) {
        with distFiles
    }
}
task tarDist(type: Tar, dependsOn: ['explodeDist']) {
    group = 'dist'
    compression = Compression.GZIP
    into(dirName) {
        with distFiles
    }
}

task explodeBin(type: Sync, dependsOn: ['makeScript', 'buildSchema', 'buildGrouperSchema']) {
    group = 'dist'
    with binDistFiles
    into file("$buildDir/explode")
}
explodeBin.doLast { ant.chmod(dir: "$buildDir/explode/bin", perm: "755", includes: "*") }

task explodeDist(type: Sync, dependsOn: ['explodeBin', 'wrapper', 'doc']) {
    group = 'dist'
    with distFiles
    into file("$buildDir/explode")
}

def getDExtras() {
    return [ 'seis.name':'sod'+getVersion(),
                'org.omg.CORBA.ORBSingletonClass':'org.jacorb.orb.ORBSingleton',
                'python.path':'${LIB}',
                'java.awt.headless':'true',
                'org.omg.CORBA.ORBClass':'org.jacorb.orb.ORB',
                'swing.volatileImageBufferEnabled':'false',
                'jacorb.connection.client.pending_reply_timeout':'20000',
                'jacorb.connection.client.idle_timeout':'90000',
                'jacorb.home':'${SOD_HOME}' ,
                'jacorb.log.default.verbosity':'2' ]
}

task makeScript() {
  doLast {
    group = 'build'
    def dExtras = getDExtras()
    def doBat = true
    ScriptBuilder.create('psod', 'edu.sc.seis.sod.Start', project, dExtras:dExtras, yourkit:true)
    ScriptBuilder.create('sod', 'edu.sc.seis.sod.Start', project, dExtras:dExtras, bat:true)
    ScriptBuilder.create('bgsod', 'edu.sc.seis.sod.Start', project, dExtras:dExtras, bat:doBat, background:true)
    ScriptBuilder.create('find_events', 'edu.sc.seis.sod.tools.find_events', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('find_stations', 'edu.sc.seis.sod.tools.find_stations', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('find_channels', 'edu.sc.seis.sod.tools.find_channels', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('find_seismograms', 'edu.sc.seis.sod.tools.find_seismograms', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('find_responses', 'edu.sc.seis.sod.tools.find_responses', project, dExtras:dExtras, bat:doBat)
  }
}



task copySodSite(dependsOn: ['buildSchemaDocs', ':seiswww:makeSodSite'], type: Sync) {
    group = 'dist'
    from project.file('../seiswww/build/sod/')
    into project.file('build/doc/')
}

task staticSchemaDocs(type: Copy) {
    group = 'dist'
    def outDir = project.file('build/velocity/sod/ingredients/')
    from project.file('site/schemaDocs/docs')
    into outDir
    doFirst {
        outDir.mkdirs()
    }
}

task buildSchemaDocs(type: JavaExec, dependsOn: ['staticSchemaDocs', 'buildSchema', 'compileJava'])  {
    def inRNGFile = new File(project.buildDir.path, 'generated-src/relaxInclude/sod.rng')
//    inRNGFile = new File(project.buildDir, 'generated-src/relax/resources/edu/sc/seis/sod/data/sod.rng')
//    jvmArgs = ['-agentlib:yjpagent', '-XX:+HeapDumpOnOutOfMemoryError', '-Xmx512m']
    jvmArgs  ['-Xmx512m']
    group = 'dist'
//   inputs.files 'site/elementPage.vm', inRNGFile.getParentFile()
    inputs.dir inRNGFile.getParentFile()
//    outDir = project.file('build/velocity/sod/ingredients')
    def outDir = new File(project.buildDir, 'generated-src/velocity/sod/ingredients')
    outputs.dir outDir
    workingDir = outDir
    args  inRNGFile, project.projectDir.path, outDir
    classpath configurations.runtime
    classpath project.file("build/classes/java/main")
    setMain "edu.sc.seis.sod.validator.documenter.SchemaDocumenter"
    doFirst {
        if (!outDir.exists() ) {
            outDir.mkdirs()
        }
    }
}

task buildSchema(dependsOn: ['transform', 'compileJava'])  {
    group = 'build'
    def inFile = new File(project.buildDir.path, 'generated-src/relaxInclude/sod.rng')
    inputs.dir inFile.getParentFile()
    ext.resourcesDir = new File(project.buildDir, 'generated-src/relax/resources')
    def outFile = new File(resourcesDir, 'edu/sc/seis/sod/data/sod.rng')
    outputs.files outFile
    doLast{
    outFile.getParentFile().mkdirs()
    def relaxArgs = '-s '+inFile
    ant.java(dir:outFile.getParentFile(),
             classname:'com.thaiopensource.relaxng.util.Driver',
             args:relaxArgs,
             maxmemory:'1512m',
             fork:true,
             classpath:configurations.runtime.asPath,
             output:outFile)
    }
}

task buildGrouperSchema(dependsOn: ['transformGrouper', 'compileJava'])  {
    group = 'build'
    def inFile = new File(project.buildDir.path, 'generated-src/relaxInclude/grouper.rng')
    inputs.dir inFile.getParentFile()
    ext.resourcesDir = new File(project.buildDir, 'generated-src/relax/resources')
    def outFile = new File(resourcesDir, 'edu/sc/seis/sod/data/grouper.rng')
    outputs.files outFile
    doLast{
    outFile.getParentFile().mkdirs()
    def relaxArgs = '-s '+inFile
    ant.java(dir:outFile.getParentFile(),
             classname:'com.thaiopensource.relaxng.util.Driver',
             args:relaxArgs,
             maxmemory:'1512m',
             fork:true,
             classpath:configurations.runtime.asPath,
             output:outFile)
    }
}

task transform(type: XSLT) {
    destDir=new File(project.buildDir, 'generated-src/relaxInclude')
    stylesheetFile = new File(project.projectDir, 'src/main/xslt/simpleXInclude.xslt')
    def rngFile = new File(project.projectDir, 'src/main/relax/sod.rng')
    source rngFile
    inputs.dir rngFile.getParentFile()
    outputs.dir destDir
}

task transformGrouper(type: XSLT) {
    destDir=new File(project.buildDir, 'generated-src/relaxInclude')
    stylesheetFile = new File(project.projectDir, 'src/main/xslt/simpleXInclude.xslt')
    def rngFile = new File(project.projectDir, 'src/main/relax/grouper.rng')
    source rngFile
    inputs.dir rngFile.getParentFile()
    outputs.dir destDir
}


task doc(dependsOn: 'javadoc') {}

doc.dependsOn(copySodSite)
assemble.dependsOn(tarDist)
assemble.dependsOn(zipDist)
processResources.dependsOn(buildSchema)
processResources.dependsOn(buildGrouperSchema)
processResources{ from(project.sourceSets.main.resources)
                  from(buildSchema.resourcesDir)}
