
group = 'edu.sc.seis'
version = '3.0.0beta3'

dependencies {
    compile project(':bag') { transitive = true }
    
    compile "jline:jline:0.9.91"
    compile "rngconvUSC:rngconv:20030225"
    compile "msv:msv:20030807"
    compile "msv:isorelax:20030807"
    compile "msv:relaxngDatatype:20030807"
    compile "msv:xsdlib:20030807"
    compile "thaiopensource:jing:20030619"
    compile "velocity-tools:velocity-tools-generic:1.4"
    compile "edu.sc.seis.mapData:dcwpo_browse:1.0"
    compile "net.sourceforge.javacsv:javacsv:2.0"
}

task zipDist(type: Zip, dependsOn: ['makeScript', 'createBuildScript', 'wrapper']) {
    dirName = project.name+'-'+version+'-src'
    zipFileSet(dir: 'build') {
        include('build.gradle')
        prefix = dirName
    }
    zipFileSet(dir: 'build/output') {
        include('bin/**')
        include('lib/**')
        prefix = dirName
    }
    zipFileSet(dir: '.') {
        include('gpl-3.0.txt')
        include('defaultProps')
        include('externalExample')
        include('jythonExample')
        include('src/**')
        include('gradleWrapper/**')
        include('gradlew')
        include('gradlew.bat')
        exclude('**/*.svn')
        prefix = dirName
    }
    zipFileSet(dir: 'scripts') {
        include('cwg.prop')
    }

}

task makeScript(dependsOn: copyToLib) << { task ->
    dExtras = [ 'seis.name':'sod-3.0.0alpha.sod', 
                'org.omg.CORBA.ORBSingletonClass':'org.jacorb.orb.ORBSingleton', 
                'python.path':'${LIB}', 
                'java.awt.headless':'true', 
                'org.omg.CORBA.ORBClass':'org.jacorb.orb.ORB', 
                'swing.volatileImageBufferEnabled':'false', 
                'java.endorsed.dirs':'${LIB}/endorsed', 
                'jacorb.connection.client.pending_reply_timeout':'120000' ]
    scriptBuild('sod', 'edu.sc.seis.sod.Start', task.project, dExtras:dExtras)
    scriptBuild('find_events', 'edu.sc.seis.sod.tools.find_events', task.project, dExtras:dExtras)
    scriptBuild('find_stations', 'edu.sc.seis.sod.tools.find_stations', task.project, dExtras:dExtras)
    scriptBuild('find_channels', 'edu.sc.seis.sod.tools.find_channels', task.project, dExtras:dExtras)
    scriptBuild('find_seismograms', 'edu.sc.seis.sod.tools.find_seismograms', task.project, dExtras:dExtras)
    scriptBuild('find_responses', 'edu.sc.seis.sod.tools.find_responses', task.project, dExtras:dExtras)
}

task printRT << {
    configurations.runtime.each { File f -> println f.name }
}
       

task buildSchemaDocs << { 
    schemaDocArgs = project.projectDir.path+'/ '+project.projectDir.path+'/../seiswww/velocity/sod/ingredients/'
    cp = configurations.runtime.asPath+":"+project.projectDir.path+"/build/classes"
    ant.java(dir:'build/output', 
             classname:'edu.sc.seis.sod.validator.documenter.SchemaDocumenter', 
             args:schemaDocArgs,
             fork:true,
             classpath:cp) 
    ant.delete(file:'build/output/velocity.log')
}

task buildSchema << { 
    relaxArgs = project.projectDir.path+'/src/main/relax/sod.rng'
    ant.java(dir:'build/output', 
             classname:'com.sun.msv.writer.relaxng.Driver', 
             args:relaxArgs,
             fork:true,
             classpath:configurations.runtime.asPath,
             output:project.projectDir.path+'/src/main/resources/edu/sc/seis/sod/data/sod.rng') 
}

