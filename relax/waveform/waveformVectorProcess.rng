<?xml version="1.0" encoding="UTF-8"?>
<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
    xmlns="http://relaxng.org/ns/structure/1.0" xmlns:xsd="http://http://www.w3.org/2001/XMLSchema">
    <include href="../base/include/externalClass.rng"/>
    <start>
        <ref name="waveformVectorProcess"/>
    </start>
    <include href="../base/include/eventLabel.rng"/>
    <include href="../base/include/quantity.rng"/>
    <define name="waveformVectorProcess">
        <choice>
            <ref name="threeComponentData"/>
            <ref name="ANDWaveformProcessWrapper"/>
            <ref name="ORWaveformProcessWrapper"/>
            <ref name="externalWaveformVectorProcess"/>
            <ref name="legacyVectorExecute"/>
            <ref name="waveformVectorFork"/>
            <ref name="waveformVectorAND"/>
            <ref name="waveformVectorOR"/>
            <ref name="waveformVectorNOT"/>
            <ref name="waveformVectorXOR"/>
            <ref name="waveformVectorAlwaysSuccess"/>
            <!-- local seismogramProcesses directly in the motion vector arm
              are treaded as if they are in a ANDWaveformProcessWrapper -->
            <externalRef href="waveformProcess.rng"/>
            <ref name="external"/>
        </choice>
    </define>
    <define name="threeComponentData">
        <element name="threeComponentData">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary> Checks for data in all three components. </summary>
                    <description> If there is some data in all three components, then this returns
                        true, if any are empty, then false. </description>
                </xsd:documentation>
            </xsd:annotation>
            <empty/>
        </element>
    </define>
    <define name="ANDWaveformProcessWrapper">
        <element name="ANDWaveformProcessWrapper">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Allows a waveform processor to be used in a waveformVector as an AND</summary>
                    <description>Each of the components of the waveformVector are processed
                    independently by the waveformProcess and the results are ANDed together.
                    This operation short circuts, so no waveforms after the first
                    failure are processed.</description>
                </xsd:documentation>
            </xsd:annotation>
            <zeroOrMore>
                <externalRef href="waveformProcess.rng"/>
            </zeroOrMore>
        </element>
    </define>
    <define name="ORWaveformProcessWrapper">
        <element name="ORWaveformProcessWrapper">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Allows a waveform processor to be used in a waveformVector as an OR</summary>
                    <description>Each of the components of the waveformVector are processed
                    independently by the waveformProcess and the results are ORed together.
                    This operation short circuts, so no waveforms after the first
                    success are processed.</description>
                </xsd:documentation>
            </xsd:annotation>
            <zeroOrMore>
                <externalRef href="waveformProcess.rng"/>
            </zeroOrMore>
        </element>
    </define>
    <define name="externalWaveformVectorProcess">
        <element name="externalWaveformVectorProcess">
            <element name="classname">
                <data type="string"/>
            </element>
            <zeroOrMore>
                <externalRef href="../base/externalRef/anyXML.rng"/>
            </zeroOrMore>
        </element>
    </define>
    <define name="legacyVectorExecute">
        <element name="legacyVectorExecute">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Executes an external program.</summary>
                    <description>The legacyVectorExecute processor is capable of running
                        existing command line programs. It does this by passing the filenames of the
                        seismograms saved by a earlier SaveSeismogramToFile processor to a program
                        started with Runtime.exec(). </description>
                    <example>
                        <legacyVectorExecute>
                            <command>echo</command>
                        </legacyVectorExecute>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <optional>
                <element name="prefix">
                    <data type="string"/>
                </element>
            </optional>
            <element name="command">
                <data type="string"/>
            </element>
            <optional>
                <element name="workingDirectory">
                    <data type="string"/>
                </element>
            </optional>
        </element>
    </define>
    <define name="waveformVectorFork">
        <element name="waveformVectorFork">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Forks the processing for vector waveform data. </summary>
                    <description>The seismograms are copied and sent through the fork allowing
                        independent processing of the same data. The return value is true if all of
                        the sub processors complete successfully, false otherwise. </description>
                    <example>
                        <waveformVectorFork>
                            <rMean/>
                            <saveSeismogramToFile>
                                <fileType>sac</fileType>
                                <dataDirectory>POND_II</dataDirectory>
                                <eventDirLabel> Event_<originTime>yyyy_DDD_HH_mm_ss</originTime>
                                </eventDirLabel>
                            </saveSeismogramToFile>
                        </waveformVectorFork>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <zeroOrMore>
                <ref name="waveformVectorProcess"/>
            </zeroOrMore>
        </element>
    </define>
    <define name="waveformVectorAND">
        <element name="waveformVectorAND">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary> Logical AND between waveformVector subsetters. </summary>
                    <description> The output is the logical AND of the outputs of all included
                        subsetters. The subsetters after the first false outputed are not evaluated.
                        The seismic data passed down the chain is the data passed in, seismogram
                        results of the contained processors are ignored.</description>
                    <example>
                        <waveformVectorAND>
                            <waveformVectorNOT>
                                <rMean/>
                            </waveformVectorNOT>
                            <saveSeismogramToFile>
                                <fileType>sac</fileType>
                                <dataDirectory>POND_II</dataDirectory>
                                <eventDirLabel> Event_<originTime>yyyy_DDD_HH_mm_ss</originTime>
                                </eventDirLabel>
                            </saveSeismogramToFile>
                        </waveformVectorAND>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <oneOrMore>
                <ref name="waveformVectorProcess"/>
            </oneOrMore>
        </element>
    </define>
    <define name="waveformVectorOR">
        <element name="waveformVectorOR">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary> Logical OR between waveformVector subsetters. </summary>
                    <description> The output is the logical OR of the outputs of all included
                        subsetters. The subsetters after the first true outputed are not evaluated.
                        The seismic data passed down the chain is the data passed in, seismogram
                        results of the contained processors are ignored. </description>
                    <example>
                        <waveformVectorOR>
                            <waveformVectorNOT>
                                <rMean/>
                            </waveformVectorNOT>
                            <saveSeismogramToFile>
                                <fileType>sac</fileType>
                                <dataDirectory>POND_II</dataDirectory>
                                <eventDirLabel> Event_<originTime>yyyy_DDD_HH_mm_ss</originTime>
                                </eventDirLabel>
                            </saveSeismogramToFile>
                        </waveformVectorOR>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <oneOrMore>
                <ref name="waveformVectorProcess"/>
            </oneOrMore>
        </element>
    </define>
    <define name="waveformVectorXOR">
        <element name="waveformVectorXOR">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary> Logical XOR between waveformVector subsetters. </summary>
                    <description> The output is the logical XOR of the outputs of all included
                        subsetters. The seismic data passed down the chain is the data passed in,
                        seismogram results of the contained processors are ignored. </description>
                    <example>
                        <waveformVectorXOR>
                            <waveformVectorNOT>
                                <rMean/>
                            </waveformVectorNOT>
                            <saveSeismogramToFile>
                                <fileType>sac</fileType>
                                <dataDirectory>POND_II</dataDirectory>
                                <eventDirLabel> Event_<originTime>yyyy_DDD_HH_mm_ss</originTime>
                                </eventDirLabel>
                            </saveSeismogramToFile>
                        </waveformVectorXOR>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <ref name="waveformVectorProcess"/>
            <ref name="waveformVectorProcess"/>
        </element>
    </define>
    <define name="waveformVectorNOT">
        <element name="waveformVectorNOT">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary> Logical NOT of an waveformVector subsetter. </summary>
                    <description> The output is the logical NOT of the output of the included
                        subsetters. The seismic data passed down the chain is the data passed in,
                        seismogram results of the contained processors are ignored.</description>
                    <example>
                        <waveformVectorNOT>
                            <rMean/>
                        </waveformVectorNOT>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <ref name="waveformVectorProcess"/>
        </element>
    </define>
    <define name="waveformVectorAlwaysSuccess">
        <element name="waveformVectorAlwaysSuccess">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Executes a subprocessor, but always returns true.</summary>
                    <description>This executes the enclosed processor, but always returns a success
                        regardless of whether the enclosed processor succeeded or failed. </description>
                    <example>
                        <waveformVectorAlwaysSuccess>
                            <waveformVectorFork>
                                <rMean/>
                                <saveSeismogramToFile>
                                    <fileType>sac</fileType>
                                    <dataDirectory>POND_II</dataDirectory>
                                    <eventDirLabel> Event_<originTime>yyyy_DDD_HH_mm_ss</originTime>
                                    </eventDirLabel>
                                </saveSeismogramToFile>
                            </waveformVectorFork>
                        </waveformVectorAlwaysSuccess>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <ref name="waveformVectorProcess"/>
        </element>
    </define>
    <define name="external">
        <element name="externalWaveformVectorProcess">
            <ref name="externalClass"/>
        </element>
    </define>
</grammar>
