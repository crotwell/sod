<?xml version="1.0" encoding="UTF-8"?>
<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
    xmlns="http://relaxng.org/ns/structure/1.0" xmlns:xsd="http://http://www.w3.org/2001/XMLSchema">
    <include href="../base/include/externalClass.rng"/>
    <include href="../base/include/seismogramImage.rng"/>
    <start>
        <ref name="waveformVectorProcess"/>
    </start>
    <include href="../base/include/eventLabel.rng"/>
    <include href="../base/include/quantity.rng"/>
    <include href="../base/include/seismogramDisplay.rng"/>
    <define name="waveformVectorProcess">
        <choice>
            <xsd:annotation>
                <summary>Tactics for processing vectors of waveforms</summary>
                <velocity>#waveformVectorArmPage()</velocity>
            </xsd:annotation>
            <ref name="threeComponentData"/>
            <ref name="ANDWaveformProcessWrapper"/>
            <ref name="ORWaveformProcessWrapper"/>
            <ref name="legacyVectorExecute"/>
            <ref name="waveformVectorFork"/>
            <ref name="waveformVectorAND"/>
            <ref name="waveformVectorOR"/>
            <ref name="waveformVectorNOT"/>
            <ref name="waveformVectorAlwaysSuccess"/>
            <!-- local seismogramProcesses directly in the motion vector arm
              are treaded as if they are in a ANDWaveformProcessWrapper -->
            <externalRef href="waveformProcess.rng"/>
            <ref name="external"/>
            <ref name="vectorImageProcess"/>
            <ref name="vectorForkProcess"/>
            <ref name="rotateGCP"/>
            <ref name="vectorTrim"/>
            <ref name="embeddedEventVector"/>
            <ref name="embeddedEventStation"/>
        </choice>
    </define>
    <define name="threeComponentData">
        <element name="threeComponentData">
            <xsd:annotation>
                <summary>Checks for data in all three components</summary>
                <description>If there is some data in all three components, then this returns true,
                    if any are empty, then false.</description>
            </xsd:annotation>
            <empty/>
        </element>
    </define>
    <define name="ANDWaveformProcessWrapper">
        <element name="ANDWaveformProcessWrapper">
            <xsd:annotation>
                <summary>Allows a waveform processor to be used in a waveformVector as an AND</summary>
                <description>Each of the components of the waveformVector are processed
                    independently by the waveformProcess and the results are ANDed together. This
                    operation short circuits, so no waveforms after the first failure are
                processed.</description>
            </xsd:annotation>
            <externalRef href="waveformProcess.rng"/>
        </element>
    </define>
    <define name="ORWaveformProcessWrapper">
        <element name="ORWaveformProcessWrapper">
            <xsd:annotation>
                <summary>Allows a waveform processor to be used in a waveformVector as an OR</summary>
                <description>Each of the components of the waveformVector are processed
                    independently by the waveformProcess and the results are ORed together. This
                    operation short circuits, so no waveforms after the first success are
                processed.</description>
            </xsd:annotation>
            <externalRef href="waveformProcess.rng"/>
        </element>
    </define>
    <define name="legacyVectorExecute">
        <element name="legacyVectorExecute">
            <xsd:annotation>
                <summary>Executes an external program</summary>
                <description>The legacyVectorExecute processor is capable of running existing
                    command line programs. It does this by passing the filenames of the seismograms
                    saved by a earlier SaveSeismogramToFile processor to a program started with
                    Runtime.exec().</description>
                <example>
                    <legacyVectorExecute>
                        <command>echo</command>
                    </legacyVectorExecute>
                </example>
            </xsd:annotation>
            <optional>
                <element name="prefix">
                    <data type="string"/>
                </element>
            </optional>
            <element name="command">
                <data type="string"/>
            </element>
            <optional>
                <element name="workingDirectory">
                    <data type="string"/>
                </element>
            </optional>
        </element>
    </define>
    <define name="waveformVectorFork">
        <element name="waveformVectorFork">
            <xsd:annotation>
                <summary>Forks the processing for vector waveform data</summary>
                <description>The seismograms are copied and sent through the fork allowing
                    independent processing of the same data. The return value is true if all of the
                    sub processors complete successfully, false otherwise.</description>
                <example>
                    <waveformVectorFork>
                        <rMean/>
                        <saveSeismogramToFile>
                            <fileType>sac</fileType>
                            <dataDirectory>POND_II</dataDirectory>
                            <eventDirLabel> Event_<originTime>yyyy_DDD_HH_mm_ss</originTime>
                            </eventDirLabel>
                        </saveSeismogramToFile>
                    </waveformVectorFork>
                </example>
            </xsd:annotation>
            <zeroOrMore>
                <ref name="waveformVectorProcess"/>
            </zeroOrMore>
        </element>
    </define>
    <define name="waveformVectorAND">
        <element name="waveformVectorAND">
            <xsd:annotation>
                <summary>Matches all included waveformVector processors</summary>
                <description>The output is the logical AND of the outputs of all included
                    waveformVector processors. This means that it will evaluate to true only if all
                    of the included processors evaluate to true. The subsetters after the first
                    false outputted are not evaluated. The seismic data passed down the chain is the
                    data passed in. Seismogram results of the contained processors are ignored.</description>
                <example>
                    <waveformVectorAND>
                        <waveformVectorNOT>
                            <rMean/>
                        </waveformVectorNOT>
                        <saveSeismogramToFile>
                            <fileType>sac</fileType>
                            <dataDirectory>POND_II</dataDirectory>
                            <eventDirLabel> Event_<originTime>yyyy_DDD_HH_mm_ss</originTime>
                            </eventDirLabel>
                        </saveSeismogramToFile>
                    </waveformVectorAND>
                </example>
            </xsd:annotation>
            <oneOrMore>
                <ref name="waveformVectorProcess"/>
            </oneOrMore>
        </element>
    </define>
    <define name="waveformVectorOR">
        <element name="waveformVectorOR">
            <xsd:annotation>
                <summary>Matches at least one of the included waveformVector processors</summary>
                <description>The output is the logical OR of the outputs of all included
                    waveformVector processors. This means that it will evaluate to true as long as
                    one of the included waveformVector processors evaluate to true. The processors
                    after the first true outputted are not evaluated. The seismic data passed down
                    the chain is the data passed in. Seismogram results of the contained processors
                    are ignored.</description>
                <example>
                    <waveformVectorOR>
                        <waveformVectorNOT>
                            <rMean/>
                        </waveformVectorNOT>
                        <saveSeismogramToFile>
                            <fileType>sac</fileType>
                            <dataDirectory>POND_II</dataDirectory>
                            <eventDirLabel> Event_<originTime>yyyy_DDD_HH_mm_ss</originTime>
                            </eventDirLabel>
                        </saveSeismogramToFile>
                    </waveformVectorOR>
                </example>
            </xsd:annotation>
            <oneOrMore>
                <ref name="waveformVectorProcess"/>
            </oneOrMore>
        </element>
    </define>
    <define name="waveformVectorNOT">
        <element name="waveformVectorNOT">
            <xsd:annotation>
                <summary>Matches the negated output of the included waveformVector processor</summary>
                <description>The output is the logical NOT of the output of the included
                    waveformVector processors. This means that it will evaluate to true if the
                    included processor evaluates to false, and vice versa. The seismic data passed
                    down the chain is the data passed in. Seismogram results of the contained
                    processors are ignored.</description>
                <example>
                    <waveformVectorNOT>
                        <rMean/>
                    </waveformVectorNOT>
                </example>
            </xsd:annotation>
            <ref name="waveformVectorProcess"/>
        </element>
    </define>
    <define name="waveformVectorAlwaysSuccess">
        <element name="waveformVectorAlwaysSuccess">
            <xsd:annotation>
                <summary>Executes a subprocessor, but always returns true.</summary>
                <description>This executes the enclosed processor, but always returns a success
                    regardless of whether the enclosed processor succeeded or failed. </description>
                <example>
                    <waveformVectorAlwaysSuccess>
                        <waveformVectorFork>
                            <rMean/>
                            <saveSeismogramToFile>
                                <fileType>sac</fileType>
                                <dataDirectory>POND_II</dataDirectory>
                                <eventDirLabel> Event_<originTime>yyyy_DDD_HH_mm_ss</originTime>
                                </eventDirLabel>
                            </saveSeismogramToFile>
                        </waveformVectorFork>
                    </waveformVectorAlwaysSuccess>
                </example>
            </xsd:annotation>
            <ref name="waveformVectorProcess"/>
        </element>
    </define>
    <define name="external">
        <element name="externalWaveformVectorProcess">
            <xsd:annotation>
                <summary>Use a WaveformVectorProcess external to SOD</summary>
                <description>This allows you to use a WaveformVectorProcess external to SOD. SOD
                    attempts to load the class named in classname, and, provided the class
                    implements the WavformVectorProcess interface, it attempt to call the process()
                    method for every waveform group.</description>
                <example>
                    <externalWaveformVectorProcess>
                        <classname>edu.somewhere.seis.sodExt.process.waveformVector.MyWaveformVectorProcess</classname>
                    </externalWaveformVectorProcess>
                </example>
            </xsd:annotation>
            <ref name="externalClass"/>
        </element>
    </define>
    <define name="vectorImageProcess">
        <element name="vectorImageProcess">
            <ref name="seismogramImageBase"/>
            <optional>
                <element name="displayTemplate">
                    <ref name="basicSeismogramDisplayContents"/>
                </element>
            </optional>
            <optional>
                <element name="verticalDisplayConfig">
                    <ref name="basicSeismogramDisplayContents"/>
                </element>
            </optional>
            <optional>
                <element name="northDisplayConfig">
                    <ref name="basicSeismogramDisplayContents"/>
                </element>
            </optional>
            <optional>
                <element name="eastDisplayConfig">
                    <ref name="basicSeismogramDisplayContents"/>
                </element>
            </optional>
        </element>
    </define>
    <define name="vectorForkProcess">
        <element name="vectorForkProcess">
            <oneOrMore>
                <ref name="waveformVectorProcess"/>
            </oneOrMore>
        </element>
    </define><define name="rotateGCP">
        <element name="rotateGCP">
            <xsd:annotation>
                <summary>Rotate the seismograms to Great Circle Path</summary>
                <description>The horizontal seismograms are rotated to the great circle path. 
                The channel codes are changed to end in R for radial or T for transverse, so 
                BHN and BHE would become BHR and BHT. If seismograms are not being rotated,
                try applying a <a href="vectorCut.html">vectorCut</a> to align all of the seismograms in the vector.</description>
            </xsd:annotation>
            <empty/>
        </element>
    </define>
    <define name="embeddedEventVector">
        <element name="embeddedEventVector">
            <xsd:annotation>
                <summary>Allows any event vector subsetter to be embedded here</summary>
            </xsd:annotation>
            <externalRef href="eventVector.rng"/>
        </element>
    </define>
    <define name="embeddedEventStation">
        <element name="embeddedEventStation">
            <xsd:annotation>
                <summary>Allows any event station subsetter to be embedded here</summary>
            </xsd:annotation>
            <externalRef href="eventStation.rng"/>
        </element>
    </define>
    <define name="vectorTrim">
        <element name="vectorTrim">
            <xsd:annotation>
                <summary>Cuts all seismograms in the vector to their smallest overlapping pieces.</summary> 
                <description>Cuts the seismograms in the vector to their intersection.  This is useful for processors like rotateGCP which expect seismograms to be of the same length and time.</description>
                
            </xsd:annotation>
                <text/>
        </element>
    </define>
</grammar>
