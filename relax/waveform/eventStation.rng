<?xml version="1.0" encoding="UTF-8"?>
<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
    xmlns="http://relaxng.org/ns/structure/1.0" xmlns:xsd="http://http://www.w3.org/2001/XMLSchema">
    <include href="../base/include/externalClass.rng"/>
    <start>
        <ref name="eventStation"/>
    </start>
    <include href="../base/include/range.rng"/>
    <define name="eventStation">
        <choice>
            <xsd:annotation>
                <summary>Tactics for selecting acceptable combinations of stations and events</summary>
            </xsd:annotation>
            <ref name="distanceRange"/>
            <ref name="embeddedOriginSubsetter"/>
            <ref name="embeddedStationSubsetter"/>
            <ref name="azimuthRange"/>
            <ref name="backAzimuthRange"/>
            <ref name="linearDistanceMagnitudeRange"/>
            <ref name="AND"/>
            <ref name="OR"/>
            <ref name="NOT"/>
            <ref name="midPoint"/>
            <ref name="phaseExists"/>
            <ref name="external"/>
            <!--
<ref name="phaseInteraction"/>
-->
            <ref name="PASS"/>
        </choice>
    </define>
    <define name="distanceRange">
        <element name="distanceRange">
            <xsd:annotation>
                <summary>Subsetter based on the distance from the event to station</summary>
                <description>This accepts event station pairs where the distance between the
                    preferred origin to the station is within the range given.</description>
                <example>
                    <distanceRange>
                        <unit>DEGREE</unit>
                        <min>30</min>
                        <max>90</max>
                    </distanceRange>
                </example>
            </xsd:annotation>
            <ref name="range"/>
        </element>
    </define>
    <define name="embeddedOriginSubsetter">
        <element name="embeddedOriginSubsetter">
            <xsd:annotation>
                <summary>Allows the embedding of an origin subsetter into a EventStation location</summary>
                <description>Allows the embedding of an origin subsetter into a EventStation
                    location. This is mainly used with an AND or OR where one condition depends on
                    the origin alone.</description>
            </xsd:annotation>
            <externalRef href="../event/origin.rng"/>
        </element>
    </define>
    <define name="embeddedStationSubsetter">
        <element name="embeddedStationSubsetter">
            <xsd:annotation>
                <summary>Allows the embedding of a station subsetter into a EventStation location</summary>
                <description> Allows the embedding of a station subsetter into a EventStation
                    location. This is mainly used with an AND or OR where one condition only depends
                    on the station.</description>
            </xsd:annotation>
            <externalRef href="../network/station.rng"/>
        </element>
    </define>
    <define name="azimuthRange">
        <element name="azimuthRange">
            <xsd:annotation>
                <summary>Subsetter based on the azimuth from the event to station</summary>
                <description>This accepts event station pairs where the azimuth from the preferred
                    origin to the station is within the range given in degrees.</description>
                <example>
                    <azimuthRange>
                        <unit>DEGREE</unit>
                        <min>30</min>
                        <max>90</max>
                    </azimuthRange>
                </example>
            </xsd:annotation>
            <ref name="range"/>
        </element>
    </define>
    <define name="backAzimuthRange">
        <element name="backAzimuthRange">
            <xsd:annotation>
                <summary>Subsetter based on the back azimuth from the station to the event</summary>
                <description>This accepts event station pairs where the azimuth from the station to
                    the preferred origin is within the range given in degrees.</description>
                <example>
                    <backAzimuthRange>
                        <unit>DEGREE</unit>
                        <min>30</min>
                        <max>90</max>
                    </backAzimuthRange>
                </example>
            </xsd:annotation>
            <ref name="range"/>
        </element>
    </define>
    <define name="linearDistanceMagnitudeRange">
        <element name="linearDistanceMagnitudeRange">
            <xsd:annotation>
                <summary>Accepts event stations pairs above a linear threshold of magnitude with distance</summary>
                <description>If the magnitude of the event is greater than or equal to the linear
                    interpolation at the event station distance, then the event station pair is
                    accepted. To reverse and take events smaller than the linear interpolation,
                    enclose this in an EventStationNOT.</description>
                <example>
                    <linearDistanceMagnitudeRange>
                        <magnitudeRange>
                            <magType>mb</magType>
                            <magType>M</magType>
                            <min>5.5</min>
                        </magnitudeRange>
                        <unit>DEGREE</unit>
                        <min>30</min>
                        <max>90</max>
                    </linearDistanceMagnitudeRange>
                </example>
            </xsd:annotation>
            <externalRef href="../base/externalRef/magnitudeRange.rng"/>
            <ref name="range"/>
        </element>
    </define>
    <define name="AND">
        <element name="eventStationAND">
            <xsd:annotation>
                <summary>Matches all enclosed EventStation subsetters</summary>
                <description>The output is the logical AND of the outputs of all included
                    EventStation subsetters. This means that it will evaluate to true only if all
                    the enclosed EventStation subsetters evaluate to true. The subsetters after the
                    first false outputted are not evaluated.</description>
                <example>
                    <eventStationAND>
                        <distanceRange>
                            <unit>DEGREE</unit>
                            <min>40</min>
                        </distanceRange>
                        <backAzimuthRange>
                            <unit>DEGREE</unit>
                            <min>30</min>
                            <max>45</max>
                        </backAzimuthRange>
                    </eventStationAND>
                </example>
            </xsd:annotation>
            <oneOrMore>
                <ref name="eventStation"/>
            </oneOrMore>
        </element>
    </define>
    <define name="OR">
        <element name="eventStationOR">
            <xsd:annotation>
                <summary>Matches at least one enclosed EventStation subsetter</summary>
                <description>The output is the logical OR of the outputs of all included
                    EventStation subsetters. This means that it will evaluate to true if at least
                    one of the enclosed EventStation subsetters evaluate to true. The subsetters
                    after the first true outputted are not evaluated.</description>
                <example>
                    <eventStationOR>
                        <distanceRange>
                            <unit>DEGREE</unit>
                            <min>40</min>
                        </distanceRange>
                        <backAzimuthRange>
                            <unit>DEGREE</unit>
                            <min>30</min>
                            <max>45</max>
                        </backAzimuthRange>
                    </eventStationOR>
                </example>
            </xsd:annotation>
            <oneOrMore>
                <ref name="eventStation"/>
            </oneOrMore>
        </element>
    </define>
    <define name="NOT">
        <element name="eventStationNOT">
            <xsd:annotation>
                <summary>Matches the negated output of the enclosed EventStation subsetter</summary>
                <description>The output is the logical NOT of the output of the enclosed
                    EventStation subsetter. This means that it will evaluate to false if the
                    enclosed EventStation subsetter evaluates to true, and vice versa.</description>
                <example>
                    <eventStationNOT>
                        <distanceRange>
                            <unit>DEGREE</unit>
                            <min>40</min>
                        </distanceRange>
                    </eventStationNOT>
                </example>
            </xsd:annotation>
            <ref name="eventStation"/>
        </element>
    </define>
    <define name="phaseExists">
        <element name="phaseExists">
            <xsd:annotation>
                <summary>Accepts an event-station pair if the given phase exists</summary>
                <description>Accepts an event-station pair if the given phase exists at the station.</description>
            </xsd:annotation>
            <optional>
                <element name="modelName">
                    <data type="string"/>
                </element>
            </optional>
            <element name="phaseName">
                    <data type="string">
                        <xsd:annotation>
                            <example>P</example>
                        </xsd:annotation>
                    </data>
            </element>
        </element>
    </define>
    <define name="midPoint">
        <element name="midPoint">
            <xsd:annotation>
                <summary>Accepts an event-station pair if the midPoint is within the area</summary>
                <description>Accepts an event-station pair if the midPoint between them is within
                    the given area. Areas can be any valid area, including BoxArea, and GlobalArea.</description>
            </xsd:annotation>
            <externalRef href="../base/externalRef/area.rng"/>
        </element>
    </define>
    <!--
Temporarily remove phaseInteraction from the processors as it is both
complicated and broken at present. It needs both recoding and a good
test suite
<define name="phaseTurnInteraction">
<choice>
<value>TOPSIDE REFLECTION</value>
<value>BOTTOMSIDE REFLECTION</value>
<value>TURNPOINT</value>
<value>UPGOING S TO P CONVERSION</value>
<value>UPGOING P TO S CONVERSION</value>
<value>DOWNGOING S TO P CONVERSION</value>
<value>DOWNGOING P TO S CONVERSION</value>
<value>PATH</value>
</choice>
</define>
<define name="phaseInteraction">
<element name="phaseInteraction">
<optional>
<element name="modelName">
<data type="string"/>
</element>
</optional>
<element name="phaseName">
<data type="string"/>
</element>
<element name="interactionStyle">
<ref name="phaseTurnInteraction"/>
</element>
<optional>
<element name="interactionNumber">
<data type="positiveInteger"/>
</element>
</optional>
<choice>
<ref name="phaseInteractionRelative"/>
<ref name="phaseInteractionAbsolute"/>
</choice>
</element>
</define>
<define name="phaseInteractionRelative">
<element name="relative">
<element name="reference">
<choice>
<value>EVENT</value>
<value>STATION</value>
</choice>
</element>
<ref name="phaseInteractionBase"/>
</element>
</define>
<define name="phaseInteractionAbsolute">
<element name="absolute">
<ref name="phaseInteractionBase"/>
</element>
</define>
<define name="phaseInteractionBase">
<zeroOrMore>
<externalRef href="../base/externalRef/area.rng"/>
</zeroOrMore>
<zeroOrMore>
<element name="depthRange">
<ref name="range"/>
</element>
</zeroOrMore>
<zeroOrMore>
<element name="distanceRange">
<ref name="range"/>
</element>
</zeroOrMore>
</define>
-->
    <define name="PASS">
        <element name="passEventStation">
            <xsd:annotation>
                <summary>Accepts any event-station pair</summary>
                <description>This is a simple subsetter that always returns true for any
                    event-station pair, which is useful for testing purposes.</description>
                <example>
                    <passEventStation/>
                </example>
            </xsd:annotation>
            <zeroOrMore>
                <ref name="eventStation"/>
            </zeroOrMore>
        </element>
    </define>
    <define name="external">
        <element name="externalEventStationSubsetter">
            <xsd:annotation>
                <summary>Use an EventStation subsetter external to SOD</summary>
                <description>Attempts to load the class named by classname, and if it implements
                    EventStationSubsetter, SOD calls accept() on the class for every event-station pair.</description>
                <example>
                    <externalEventStationSubsetter>
                        <classname>edu.somewhere.seis.sodExt.subsetter.eventStation.MyEventStationSubsetter</classname>
                    </externalEventStationSubsetter>
                </example>
            </xsd:annotation>
            <ref name="externalClass"/>
        </element>
    </define>
</grammar>
