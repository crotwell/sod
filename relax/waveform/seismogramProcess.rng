<?xml version="1.0" encoding="UTF-8"?>
<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
    xmlns="http://relaxng.org/ns/structure/1.0" xmlns:xsd="http://http://www.w3.org/2001/XMLSchema">
    <start>
        <ref name="seismogramProcess"/>
    </start>
    <include href="../base/include/eventLabel.rng"/>
    <include href="../base/include/quantity.rng"/>
    <include href="../base/include/phaseWindow.rng"/>
    <define name="seismogramProcess">
        <choice>
            <xsd:annotation>
                <include/>
            </xsd:annotation>
            <ref name="printlineSeismogramProcess"/>
            <ref name="saveSeismogramToFile"/>
            <ref name="responseGain"/>
            <ref name="phaseCut"/>
            <ref name="rMean"/>
            <ref name="rTrend"/>
            <ref name="taper"/>
            <ref name="externalWaveformProcess"/>
            <ref name="localSeismogramStatus"/>
            <ref name="filter"/>
            <ref name="forkProcess"/>
            <ref name="alwaysSuccess"/>
            <ref name="phaseSignalToNoise"/>
            <ref name="seismogramImageProcess"/>
            <ref name="legacyExecute"/>
            <ref name="seismogramAND"/>
            <ref name="seismogramOR"/>
            <ref name="seismogramXOR"/>
            <ref name="seismogramNOT"/>
            <ref name="waveformCountProcessor"/>
        </choice>
    </define>
    <define name="seismogramAND">
        <element name="seismogramAND">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary> Logical AND between seismograph subsetters. </summary>
                    <description> The output is the logical AND of the outputs of all included
                        subsetters. The subsetters after the first false outputted are not
                        evaluated. The seismic data passed down the chain is the data passed in,
                        seismogram results of the contained processors are ignored.</description>
                    <example>
                        <seismogramAND>
                            <xyz/>
                            <pdq/>
                        </seismogramAND>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <oneOrMore>
                <ref name="seismogramProcess"/>
            </oneOrMore>
        </element>
    </define>
    <define name="seismogramOR">
        <element name="seismogramOR">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary> Logical OR between seismogramSubsetter subsetters. </summary>
                    <description> The output is the logical OR of the outputs of all included
                        subsetters. The subsetters after the first true outputted are not evaluated.
                        The seismic data passed down the chain is the data passed in, seismogram
                        results of the contained processors are ignored. </description>
                    <example>
                        <seismogramOR>
                            <xyz/>
                            <pdq/>
                        </seismogramOR>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <oneOrMore>
                <ref name="seismogramProcess"/>
            </oneOrMore>
        </element>
    </define>
    <define name="seismogramXOR">
        <element name="seismogramXOR">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary> Logical XOR between seismogramSubsetter subsetters. </summary>
                    <description> The output is the logical XOR of the outputs of all included
                        subsetters. The seismic data passed down the chain is the data passed in,
                        seismogram results of the contained processors are ignored. </description>
                    <example>
                        <seismogramXOR>
                            <xyz/>
                            <pdq/>
                        </seismogramXOR>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <ref name="seismogramProcess"/>
            <ref name="seismogramProcess"/>
        </element>
    </define>
    <define name="seismogramNOT">
        <element name="seismogramNOT">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary> Logical NOT of an seismogramSubsetter subsetter. </summary>
                    <description> The output is the logical NOT of the output of the included
                        subsetters. The seismic data passed down the chain is the data passed in,
                        seismogram results of the contained processors are ignored.</description>
                    <example>
                        <seismogramNOT>
                            <xyz/>
                        </seismogramNOT>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <ref name="seismogramProcess"/>
        </element>
    </define>
    <define name="phaseCut">
        <element name="phaseCut">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary> Cuts seismograms relative to predicted phase arrival times. </summary>
                    <description> Cuts seismograms relative to offsets from phase arrival time
                        predicted by TauP for the model. </description>
                    <example>
                        <phaseCut>
                            <model>prem</model>
                            <beginPhase>P</beginPhase>
                            <beginOffset>
                                <unit>SECOND</unit>
                                <value>-100</value>
                            </beginOffset>
                            <endPhase>P</endPhase>
                            <endOffset>
                                <unit>SECOND</unit>
                                <value>-100</value>
                            </endOffset>
                        </phaseCut>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <ref name="phaseWindow"/>
        </element>
    </define>
    <define name="filter">
        <element name="filter">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Filter</summary>
                    <description>Applies a Butterworth filter to the seismograms. The filterType can
                        be CAUSAL or NONCAUSAL or TWOPASS, with the last two being equivalent.</description>
                    <example>
                        <filter>
                            <lowFreqCorner>
                                <value>50</value>
                                <unit>SECOND</unit>
                            </lowFreqCorner>
                            <highFreqCorner>
                                <value>5</value>
                                <unit>HERTZ</unit>
                            </highFreqCorner>
                            <numPoles>2</numPoles>
                            <filterType>NONCAUSAL</filterType>
                        </filter>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <element name="lowFreqCorner">
                <ref name="cornerSetting"/>
            </element>
            <element name="highFreqCorner">
                <ref name="cornerSetting"/>
            </element>
            <element name="numPoles">
                <data type="int"/>
            </element>
            <element name="filterType">
                <choice>
                    <value>NONCAUSAL</value>
                    <value>CAUSAL</value>
                    <value>TWOPASS</value>
                </choice>
            </element>
        </element>
    </define>
    <define name="cornerSetting">
        <choice>
            <ref name="time"/>
            <ref name="freq"/>
        </choice>
    </define>
    <define name="rMean">
        <element name="rMean">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Remove Mean</summary>
                    <description>Removes the mean of the seismograms.</description>
                    <example>
                        <rMean/>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <empty/>
        </element>
    </define>
    <define name="rTrend">
        <element name="rTrend">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Remove Trend</summary>
                    <description>Removes the trend of the seismograms.</description>
                    <example>
                        <rTrend/>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <empty/>
        </element>
    </define>
    <define name="taper">
        <element name="taper">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Apply a taper.</summary>
                    <description>Applies a taper to the seismograms. The type can be one of HANNING,
                        HAMMIN or COSINE, with HANNING the default. The width is given as a fraction
                        of the seismogram length, and so should be 0.5 as otherwise the begin and
                        end taper will overlap each other. 0.05 is the default.</description>
                    <example>
                        <taper>
                            <width>.05</width>
                            <type>HANNING</type>
                        </taper>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <optional>
                <element name="width">
                    <data type="float"/>
                </element>
            </optional>
            <optional>
                <element name="type">
                    <choice>
                        <value>HANNING</value>
                        <value>HAMMING</value>
                        <value>COSINE</value>
                    </choice>
                </element>
            </optional>
        </element>
    </define>
    <define name="responseGain">
        <element name="responseGain">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Response Gain Correction</summary>
                    <description>Applies a overall sensitivity from the response to the seismograms.
                        This will convert int or short seismograms into floats to avoid rounding
                        errors that could result in the output seismograms being all zeros. There is
                        no configuration.</description>
                    <example>
                        <responseGain/>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <empty/>
        </element>
    </define>
    <define name="saveSeismogramToFile">
        <element name="saveSeismogramToFile">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Saves seismograms in files. </summary>
                    <description>The seismograms are written to data files in the given directory.
                        Also writes out a dsml file for use in GEE and other fissures tools that
                        support datasets. Always returns true unless there is an error. </description>
                    <example>
                        <saveSeismogramToFile>
                            <fileType>sac</fileType>
                            <dataDirectory>POND_II</dataDirectory>
                            <eventDirLabel> Event_<originTime>yyyy_DDD_HH_mm_ss</originTime>
                            </eventDirLabel>
                        </saveSeismogramToFile>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <element name="fileType">
                <choice>
                    <value>sac</value>
                    <value>mseed</value>
                </choice>
            </element>
            <optional>
                <element name="prefix">
                    <data type="string"/>
                </element>
            </optional>
            <element name="dataDirectory">
                <data type="string"/>
            </element>
            <element name="eventDirLabel">
                <ref name="eventLabel"/>
            </element>
        </element>
    </define>
    <define name="externalWaveformProcess">
        <element name="externalWaveformProcess">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Runs an externally defined Java processor</summary>
                    <description>This runs the Java processor defined in the given class, which must
                        implement the edu.sc.seis.sod.process.waveformArm.process.WaveformProcess
                        interface. </description>
                    <example>
                        <externalWaveformProcess>
                            <classname>edu.myuniv.seis.xyz.MySeisProcessor</classname>
                            <dataDirectory>POND_II</dataDirectory>
                            <extraParam>1.7</extraParam>
                        </externalWaveformProcess>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <element name="classname">
                <data type="string"/>
            </element>
            <zeroOrMore>
                <externalRef href="../base/externalRef/anyXML.rng"/>
            </zeroOrMore>
        </element>
    </define>
    <define name="printlineSeismogramProcess">
        <element name="printlineSeismogramProcess">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Prints a line to std out for each seismogram processed.</summary>
                    <description>This simply prints a line to standard out for each seismogram to be
                        processed. It can be used as a simple status monitor. </description>
                    <include/>
                </xsd:documentation>
            </xsd:annotation>
            <empty/>
        </element>
    </define>
    <define name="localSeismogramStatus">
        <element name="localSeismogramTemplateGenerator">
            <element name="template">
                <data type="string"/>
            </element>
        </element>
    </define>
    <define name="forkProcess">
        <element name="forkProcess">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Forks the processing of seismograms.</summary>
                    <description>This forks the processing of the seismograms so that more than one
                        sequence of processing steps can be applied to the data independently. The
                        fork processor returns the original input seismograms, but the success
                        boolean of the enclosed processors. </description>
                    <example>
                        <forkProcess>
                            <rTrend/>
                            <saveSeismogramToFile>
                                <fileType>sac</fileType>
                                <dataDirectory>rTrendData</dataDirectory>
                                <eventDirLabel> Event_<originTime>yyyy_DDD_HH_mm_ss</originTime>
                                </eventDirLabel>
                            </saveSeismogramToFile>
                        </forkProcess>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <oneOrMore>
                <ref name="seismogramProcess"/>
            </oneOrMore>
        </element>
    </define>
    <define name="alwaysSuccess">
        <element name="alwaysSuccess">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Executes a subprocessor, but always returns true.</summary>
                    <description>This executes the enclosed processor, but always returns a success
                        regardless of whether the enclosed processor succeeded or failed. </description>
                    <example>
                        <alwaysSuccess>
                            <printlineSeismogramProcess/>
                        </alwaysSuccess>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <ref name="seismogramProcess"/>
        </element>
    </define>
    <define name="phaseSignalToNoise">
        <element name="phaseSignalToNoise">
            <optional>
                <element name="modelName">
                    <data type="string"/>
                </element>
            </optional>
            <element name="phaseName">
                <data type="string"/>
            </element>
            <element name="shortOffsetBegin">
                <ref name="time"/>
            </element>
            <element name="shortOffsetEnd">
                <ref name="time"/>
            </element>
            <element name="longOffsetBegin">
                <ref name="time"/>
            </element>
            <element name="longOffsetEnd">
                <ref name="time"/>
            </element>
            <element name="ratio">
                <data type="float"/>
            </element>
        </element>
    </define>
    <define name="seismogramImageProcess">
        <element name="seismogramImageProcess">
        <optional>
            <element name="phaseWindow">
                 <ref name="phaseWindow"/>
            </element>
        </optional>
            <optional>
                <element name="fileDir">
                    <data type="string"/>
                </element>
            </optional>
            <element name="seismogramConfig">
                <element name="template">
                    <data type="string"/>
                </element>
            </element>
            <optional>
                <element name="prefix">
                    <data type="string"/>
                </element>
            </optional>
            <optional>
                <element name="fileType">
                    <choice>
                        <value>png</value>
                        <value>pdf</value>
                    </choice>
                </element>
            </optional>
        </element>
    </define>
    <define name="legacyExecute">
        <element name="legacyExecute">
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    <summary>Executes an external program.</summary>
                    <description>The legacyExecute processor is capable of running existing command
                        line programs. It does this by passing the filename of the seismograms saved
                        by a earlier SaveSeismogramToFile processor to a program started with
                        Runtime.exec(). </description>
                    <example>
                        <legacyExecute>
                            <command>echo</command>
                        </legacyExecute>
                    </example>
                </xsd:documentation>
            </xsd:annotation>
            <optional>
                <element name="prefix">
                    <data type="string"/>
                </element>
            </optional>
            <element name="command">
                <data type="string"/>
            </element>
            <optional>
                <element name="workingDirectory">
                    <data type="string"/>
                </element>
            </optional>
        </element>
    </define>
    <define name="waveformCountProcessor">
        <element name="waveformCountProcessor">
            <empty/>
        </element>
    </define>
</grammar>
