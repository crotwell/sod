<?xml version="1.0" encoding="UTF-8"?>
<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
    xmlns="http://relaxng.org/ns/structure/1.0" xmlns:xsd="http://http://www.w3.org/2001/XMLSchema">
    <include href="../base/include/externalClass.rng"/>
    <start>
        <ref name="channel"/>
    </start>
    <include href="../base/include/timeRange.rng"/>
    <include href="../base/include/quantity.rng"/>
    <define name="channel">
        <choice>
            <xsd:annotation>
                <summary>Tactics for selecting channels</summary>
                <description>This collects all of the subsetters that make decisions on the contents
                    of a channel.</description>
            </xsd:annotation>
            <ref name="hadDataLastWeek"/>
            <ref name="channelCode"/>
            <ref name="bandCode"/>
            <ref name="gainCode"/>
            <ref name="orientationCode"/>
            <ref name="sampling"/>
            <ref name="effectiveTimeOverlap"/>
            <ref name="orientationRange"/>
            <ref name="orientationAzimuthRange"/>
            <ref name="orientationDipRange"/>
            <ref name="AND"/>
            <ref name="OR"/>
            <ref name="NOT"/>
            <ref name="PASS"/>
            <ref name="externalChannelSubsetter"/>
        </choice>
    </define>
    <define name="channelLogical">
        <choice>
            <ref name="channelCode"/>
            <ref name="bandCode"/>
            <ref name="gainCode"/>
            <ref name="orientationCode"/>
            <ref name="sampling"/>
            <ref name="effectiveTimeOverlap"/>
            <ref name="orientationRange"/>
            <ref name="orientationAzimuthRange"/>
            <ref name="orientationDipRange"/>
            <ref name="AND"/>
            <ref name="OR"/>
            <ref name="NOT"/>
            <ref name="PASS"/>
            <ref name="externalChannelSubsetter"/>
            <externalRef href="site.rng"/>
            <externalRef href="station.rng"/>
            <externalRef href="network.rng"/>
            <ref name="hadDataLastWeek"/>
        </choice>
    </define>
    <define name="singleLetterOrNumber">
        <data type="string">
            <xsd:annotation>
                <summary>Matches a single letter or number</summary>
                <example>B</example>
            </xsd:annotation>
            <param name="pattern">[A-Z0-9]{1}</param>
        </data>
    </define>
    <define name="channelCode">
        <element name="channelCode">
            <xsd:annotation>
                <summary>Matches the entire channel code</summary>
                <description>Matches a channel code, such as BHZ. See the <a
                        href="http://www.iris.edu/manuals/SEED_appA.htm">SEED manual</a> for the
                    list of available code letters.</description>
            </xsd:annotation>
            <data type="string">
                <xsd:annotation>
                    <example>BHZ</example>
                </xsd:annotation>
                <param name="pattern">[A-Z0-9]{3}</param>
            </data>
        </element>
    </define>
    <define name="bandCode">
        <element name="bandCode">
            <xsd:annotation>
                <summary>Matches the band code of a channel</summary>
                <description>Matches the band code of a channel, such as B for broadband and L for
                    long period. See the <a href="http://www.iris.edu/manuals/SEED_appA.htm">SEED
                        manual</a> for the list of available code letters.</description>
            </xsd:annotation>
            <ref name="singleLetterOrNumber"/>
        </element>
    </define>
    <define name="gainCode">
        <element name="gainCode">
            <xsd:annotation>
                <summary>Matches a gain code in a channel code</summary>
                <description>Matches a gain code in a channel code, such as H for high gain and L
                    for low gain. See the <a href="http://www.iris.edu/manuals/SEED_appA.htm">SEED
                        manual</a> for the list of available code letters.</description>
                <example>
                    <gainCode>H</gainCode>
                </example>
            </xsd:annotation>
            <ref name="singleLetterOrNumber"/>
        </element>
    </define>
    <define name="orientationCode">
        <element name="orientationCode">
            <xsd:annotation>
                <summary>Matches a orientation code in a channel code</summary>
                <description>Matches a orientation code in a channel code, such as Z for vertical
                    and N for north. See the <a href="http://www.iris.edu/manuals/SEED_appA.htm"
                        >SEED manual</a> for the list of available code letters.</description>
                <example>
                    <orientationCode>Z</orientationCode>
                </example>
            </xsd:annotation>
            <ref name="singleLetterOrNumber"/>
        </element>
    </define>
    <define name="AND">
        <element name="channelAND">
            <xsd:annotation>
                <summary>Matches all enclosed channel subsetters</summary>
                <description>The output is the logical AND of the outputs of all included channel
                    subsetters. This means that it will evaluate to true only if all the enclosed
                    channel subsetters evaluate to true. The subsetters after the first false
                    outputted are not evaluated.</description>
                <example>
                    <channelAND>
                        <channelEffectiveTimeOverlap>
                            <startTime>20020701T00:00:00.001Z</startTime>
                            <endTime>20021030T00:00:00.001Z</endTime>
                        </channelEffectiveTimeOverlap>
                        <sampling>
                            <min>1</min>
                            <max>40</max>
                            <interval>
                                <unit>SECOND</unit>
                                <value>1</value>
                            </interval>
                        </sampling>
                    </channelAND>
                </example>
            </xsd:annotation>
            <oneOrMore>
                <ref name="channelLogical"/>
            </oneOrMore>
        </element>
    </define>
    <define name="OR">
        <element name="channelOR">
            <xsd:annotation>
                <summary>Matches at least one enclosed channel subsetter</summary>
                <description>The output is the logical OR of the outputs of all included Channeel
                    subsetters. This means that it will evaluate to true if at least one of the
                    enclosed channel subsetters evaluates to true. The subsetters after the first
                    true outputted are not evaluated.</description>
                <example>
                    <channelOR>
                        <channelEffectiveTimeOverlap>
                            <startTime>20020701T00:00:00.001Z</startTime>
                            <endTime>20021030T00:00:00.001Z</endTime>
                        </channelEffectiveTimeOverlap>
                        <sampling>
                            <min>1</min>
                            <max>40</max>
                            <interval>
                                <unit>SECOND</unit>
                                <value>1</value>
                            </interval>
                        </sampling>
                    </channelOR>
                </example>
            </xsd:annotation>
            <oneOrMore>
                <ref name="channelLogical"/>
            </oneOrMore>
        </element>
    </define>
    <define name="NOT">
        <element name="channelNOT">
            <xsd:annotation>
                <summary>Matches the negated output of the enclosed channel subsetter</summary>
                <description>The output is the logical NOT of the output of the enclosed channel
                    subsetter. This means that it will evaluate to false if the enclosed channel
                    subsetter evaluates to true, and vice versa.</description>
            </xsd:annotation>
            <ref name="channel"/>
        </element>
    </define>
    <define name="sampling">
        <element name="sampling">
            <xsd:annotation>
                <summary>Matches if the sampling rate of the channel is within the range</summary>
                <description>Matches if the sampling rate of the channel is within the range. Both
                    the min and max are optional, although at least one must be given to have any
                    effect</description>
                <example>
                    <sampling>
                        <min>1</min>
                        <max>40</max>
                        <interval>
                            <unit>SECOND</unit>
                            <value>1</value>
                        </interval>
                    </sampling>
                </example>
            </xsd:annotation>
            <optional>
                <element name="min">
                    <data type="integer"/>
                </element>
            </optional>
            <optional>
                <element name="max">
                    <data type="integer"/>
                </element>
            </optional>
            <element name="interval">
                <ref name="time"/>
            </element>
        </element>
    </define>
    <define name="effectiveTimeOverlap">
        <element name="channelEffectiveTimeOverlap">
            <xsd:annotation>
                <summary>Matches if the channel effective time overlaps the given time range</summary>
                <description>Matches if the channel effective time overlaps the given time range.
                    This is generally used to avoid processing channels that did not yet exist, or
                    were deactivated before a time range of interest.</description>
            </xsd:annotation>
            <ref name="timeRange"/>
        </element>
    </define>
    <define name="orientationRange">
        <element name="orientationRange">
            <xsd:annotation>
                <summary>Checks if a channel's orientation lies within a range</summary>
                <description>The match is true if the channel's orientation is within the offset of
                    the given azimuth and dip. The offset, as well as the azimuth and dip are given
                    in degrees.</description>
            </xsd:annotation>
            <element name="azimuth">
                <data type="float">
                    <xsd:annotation>
                        <example>45</example>
                    </xsd:annotation>
                </data>
            </element>
            <element name="dip">
                <data type="float">
                    <xsd:annotation>
                        <example>0</example>
                    </xsd:annotation>
                </data>
            </element>
            <element name="maxOffset">
                <data type="float">
                    <xsd:annotation>
                        <example>20</example>
                    </xsd:annotation>
                </data>
            </element>
        </element>
    </define>
    <define name="orientationAzimuthRange">
        <element name="orientationAzimuthRange">
            <xsd:annotation>
                <summary>Matches the azimuth of a channel</summary>
                <description>The match is true if azimuth of the channel's orientation is within the
                    given azimuth range. The min and max are given in degrees.</description>
            </xsd:annotation>
            <element name="min">
                <data type="float">
                    <xsd:annotation>
                        <example>-10</example>
                    </xsd:annotation>
                </data>
            </element>
            <element name="max">
                <data type="float">
                    <xsd:annotation>
                        <example>10</example>
                    </xsd:annotation>
                </data>
            </element>
        </element>
    </define>
    <define name="orientationDipRange">
        <element name="orientationDipRange">
            <xsd:annotation>
                <summary>Matches the dip of a channel</summary>
                <description>The match is true if the dip of the channel's orientation is within the
                    given dip range. The min and max are given in degrees.</description>
            </xsd:annotation>
            <element name="min">
                <data type="float">
                    <xsd:annotation>
                        <example>-10</example>
                    </xsd:annotation>
                </data>
            </element>
            <element name="max">
                <data type="float">
                    <xsd:annotation>
                        <example>10</example>
                    </xsd:annotation>
                </data>
            </element>
        </element>
    </define>
    <define name="PASS">
        <element name="passChannel">
            <xsd:annotation>
                <summary>Accepts any channel</summary>
                <description>This is a simple subsetter that always returns true for any channel,
                    which is useful for testing purposes.</description>
            </xsd:annotation>
            <zeroOrMore>
                <ref name="channel"/>
            </zeroOrMore>
        </element>
    </define>
    <define name="externalChannelSubsetter">
        <element name="externalChannelSubsetter">
            <xsd:annotation>
                <summary>Use a channel subsetter external to SOD</summary>
                <description>Attempts to load the class named by classname, and if it implements
                    ChannelSubsetter, SOD calls accept() on the class for every channel.</description>
                <example>
                    <externalChannelSubsetter>
                        <classname>edu.somewhere.seis.sodExt.subsetter.channel.MyChannelSubsetter</classname>
                    </externalChannelSubsetter>
                </example>
            </xsd:annotation>
            <ref name="externalClass"/>
        </element>
    </define>
    <define name="hadDataLastWeek">
        <element name="hadDataLastWeek">
            <xsd:annotation>
                <summary>Checks if a channel has any available data for the given seismogram server
                    for the past week</summary>
            </xsd:annotation>
            <externalRef href="../waveform/fixedDataCenter.rng"/>
        </element>
    </define>
</grammar>
