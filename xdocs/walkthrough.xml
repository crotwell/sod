<?xml version="1.0"?>
<document>

  <properties>
    <author>Philip Crotwell</author>
    <title>SOD Walkthrough</title>
  </properties>

<body>

<section name="Take off your shoes, wiggle your toes and take a walk on the SOD">
<p>
We shall assume that you have successfully downloaded and extracted SOD from
its tar or zip file. If not please have a look at the
<a href="install.html">installation</a> document. This document cover SOD from
the point of view of the GUI editor. If you would like a lower level, XML based
view of how SOD works, please see the ***TODO*** tutorial document.
</p>
<p>
Change into the SOD directory, where you should see various files and subdirectories.
Start up the GUI editor, by running <code>./bin/editor.sh</code> or <code>bin\editor.bat</code>.
The editor should start with the tutorial configuration preloaded. This is
contained within the editor, so there is no need to worry about messing anything
up as it can be reset by choosing ***TODO*** from the ***TODO*** menu. You will
see several tabs which cover the various sections of a SOD run. We will cover each
in turn.
</p>
<section name="Event">
<p>
The Event tab, also known as the Event Arm, selects which events are of interest.
The tutorial configuration file by default gets events from the IRIS Event server
from anywhere in the world with magnitude greater than 6 during January of 2003.
These values can be changed and SOD can do quite a bit more things, but this is
a minimal set parameters. One subtle point is that a single real earthquake will
be in multiple catalogs within the DMC's database. Because there is currently
no way to automatically group these related origins into a single event based on
the information to which the DMC has access , these origins each appear in separate events.
So, it is usually wise to pick a particular catalog to avoid duplicate
processing of events. The default here is the PREF catalog from the DMC. PREF is not a true
catalog, but rather something that the DMC Event server understands as the "best"
catalog depending on the time of the request. The weeklies, or WHDF, catalog from the
NEIC is another common one for historical data and if you
are doing a SOD run and want near real time data, then you probably want to
use FINGER catalog as that has a short delay from earthquake occurring to the
location being included in the catalog.
</p>
<p>
After the query to the remote event server, we have our events locally and
could do some subsetting based on the origin, but for the tutorial we will
assume all of these events are fine. Just to make running
sod a little more interesting, we will include an event processor. This one just
prints out a line every time an event arrives. This finishes the event arm.
</p>
<p>
Feel free to modify any of these values to customize your search. Be aware that
some servers may not have data for all types of earthquakes, and it is possible
to make choices that result in no data matching. Mistakes are the best way to
learn, so click away!
</p>
</section>

<section name="Network">
<p>
The Network tab is the other side of the coin, once you have earthquakes, you must
pick stations in order to ask for data. This query is sent to the IRIS Network
server. We will get all stations in the II network, sites (which loosely correspond
to seed loc ids) that are either space-space or 00 and channels that are long
period. The construction is that the band code must be L and the gain code
cannot be O. This accepts both LH? and LL? channels, but rejects LOG channels.
Of course there are other, probably better ways, of accomplishing this same
thing, but this is a good way of introducing the logical subsetters. Notice that
there are three channel subsetters joined with a logical AND, and one of these
is a logical NOT that contains another subsetter. SOD makes heavy use of the
ability to build up complex queries from simple building blocks glued
together with logical operators. SOD tries to provide lots of small operations,
instead of big, monoliths in order to give the user the flexibility to use it
in new and interesting ways.
</p>
<p>
You will also notice that there are quite a few effective time subsetters. These
are not strictly required, and the SOD run would likely generate the same exact
result if they were not there, but adding them allows SOD to be more efficient.
By rejecting stations and channels that were not in existence at the time covered
by your earthquake request, SOD is able to avoid a significant number of calls on the remote
server. For example, if you eliminate a station, SOD need not retrieve the
channels for that station. In general, SOD will run faster if you try to
eliminate as much as possible as early as possible.
</p>
</section>

<section name="Waveform">
<p>
The Waveform tab shows what event-channel pairs are accepted, and what data
to ask for. The first item is a distance range subsetter. Only events that
are at least 30, but less than 90, degrees away from the station are processed.
This is an example of a type of subsetting that cannot be performed within the
event or network tabs and it involves a combination of both the event and
station information.
</p>
<p>
The next item is the ***TODO***
</p>
<p>
The Phase Request selects the time range, relative to particular phases, for
which the server will be asked. The travel time calculations are based on the
<a href="http://www.seis.sc.edu/software/TauP">TauP Toolkit</a>, and so
any choice of phase and model that is compatible with TauP is allowed. It is
important to be careful of phases that might not exist at all distances, like
P and S. An alternative is to use ttp and tts which are TauP aliases for
p, P, Pn, Pdiff, PKiKP, PKIKP and s, S, Sn, Sdiff, SKIKS respectively. In any case
the first arriving phase of that name is used. The offsets are added to the
phase times to get the request time window. Note that this means that the
begun offset should usually be negative in order to include the phase. The server
in many cases will actually return a slightly wider time window than the actual
request in order to avoid splitting data chunks.
</p>
<p>
Once the request is ready, SOD needs to choose the server. In this case we will
send it to the IRIS POND. Users need to know the characteristics of the servers
that they use. For example, the POND only has data for events of magnitude 5.5
or larger and the BUD only has data for the last three months.
</p>
<p>
Next is the Some Coverage subsetter. It acts on the servers response to a query
for available data, simply requiring that there be some. This is a pretty common
subsetter to use as it keeps SOD from asking for data that doesn't exist, as well
as logging the fact that the data wasn't available. This aids in SOD's ability
to go back later and retry requests if the data was not yet available, perhaps due
to a delay in transmitting the data from the station.
</p>
<p>
At this point SOD will request and retrieve the actual data. The last items
will print a
line saying how many seismograms were received for each request, and then save
the data in SAC format in a directory. Due to gaps in the original recording,
it is possible to get more than one seismogram from a single request, but
usually for small time window this does not happen.
</p>
<p>
The SacFileProcessor allows you to customize the directory naming structure.
First, the data-Directory element gives the parent directory into which sod
will build the actual event directories. Sod will create this directory if it
does not exist. Next, the eventDirLabel creates the name of each event's
subdirectory. We will name the directories with Event_ followed by the time
of the event as year_Jday_hour_minute_second. Documentation on the time
format can be found
<a href="http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html">here</a>.
</p>
<p>
The last items in the waveform tab are the status processors. They generate
html pages that show how SOD is progressing, what events and stations were
used, and images of the retrieved seismograms.
</p>
</section>

<section name="Run SOD">
<p>
Although there is a GUI for editing the configuration files, SOD itself is not
a GUI application. This is done intentionally as SOD will likely be a long running
background processes, and so command line execution is the preferred way. So, to
start a SOD run, you need to save the XML configuration file to disk. Then start
it up with <code>sod.sh -f mysod.xml</code>. Once SOD is started, open the
<code>index.html</code> file withing the <code>status</code> directory. You will
see a map of the events that have been found as well as some statistics about
the run. The Networks link show which networks, stations and channels were
accepted by SOD. The Events link in the menu on the left takes you to a page with the
same map, but with a list of the accepted events below. Each event link goes to
a summary for that event showing which stations were accepted. The stations
in the list are links that show more information about the station and event as
well as which channels retrieved data, and a image of the seimogram if it was
successful.
</p>
<p>
You should also look at the Errors page, as any problems that occur will be
reported there. Also, the Wily link takes you to the Wily DHI status monitor.
Wily will show it if one of the servers is down. The Configuration link shows the
original configuration file. This is mostly useful if the status pages from a SOD
run are on a web server.
</p>
</section>

<section name="WEED">
<p>
Now that you have seen the tutorial template, feel free to visit the weed template,
also located in the ***TODO*** menu.
It attempts to make SOD behave similarly to the old IRIS WEED program. There are
some areas where making the functionality exactly like WEED would have been harder
on the user, and so it was not designed to merely be similar. In addition to the
functionality in the Tutorial template, the WEED template also supports distance,
azimuth and back azimuth from a fixed point for events, response output to file,
more logical operations, and distance, azimuth, back azimuth and mid point for
event station pairs.
</p>
</section>
</body>
</document>

