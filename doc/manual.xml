<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                      "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book>
<bookinfo>
<title>The SOD Manual</title>
<author><firstname>Philip</firstname><surname>Crotwell</surname></author>
<copyright>
<year>2002</year>
<holder>University of South Carolina</holder>
</copyright>
</bookinfo>

<chapter><title>Introduction</title>
<para>Welcome to Sod, the Standing Order for Data. Sod aims to automate the
process of selecting, subsetting, retrieving and processing of event based
seismic data. It is based on the DHI subset of the Fissures framework. 
Fissures itself is based on Corba, and almost all implementation work to date
has been done in Java.</para>
<para>Sod is currently event based. This assumption that requests will only
be for data
that is associated in some sense to a particular seismic event certainly does
not cover all of seismology, but is without a doubt the largest catagory. A
future version of Sod may allow non-event based requests.
</para>
<para>
It is also not a GUI based application. The intention is that Sod will be a 
long running, background process that assembles and does initial processing
of seismic data that may be of interest. Certainly GUIs may be created that
work with Sod, but Sod itself will not provide these GUI tools.
</para>
<para>
The design of Sod breaks the definition of interesting data into three stages
or arms. The first is the event arm, which deals solely with selecting events.
Common criteria used to decide whether and event is interesting include
magnitude, depth, and location. Note however that items such as distance from
a station are not appropriate as they involve additional information that
is not contained within the event.
</para>
<para>
The second arm is the network arm. It deals with determining which seismic
stations are interesting, and which channels at those stations are useful. 
Common criteria include station location, network affiliation, sampling
rate and channel orientation.
</para>
<para>
The last arm is the waveform arm. It merges the successful events and channels
from the two previous arms and uses them to request wavefoms. Criteria
here include things such as disstance and azimuth that require the combination
of both station and event information, as well as measurements on the actual
waveform.
</para>
</chapter>

<chapter>
<title>Event Arm</title>
<para>
The event arm separates seismic events into interesting and 
non-interesting events. Interesting events flow out of the event arm into
the waveform arm for further processing, while non-interesting events are 
discarded. There are four main steps within the event arm, which are described
below.
</para>
<sect1>
<title>Source</title>
<para>
The source of the event information is given first. It can either be a
event finder or an event channel. Event finders are primarily used to
mine historical event catalogs, while the event channel provides notification
of new origins and events.
</para>
<sect2>
<title>Event Finder</title>
<para>The event finder configuration is given in an &lt;eventFinder&gt; tag, 
and consists of a serverDNS
and a serverName entry, both of which allow Fissures/DHI EventDC servers to
be located from a Naming Service, as well as elements to specify the query. 
The serverDNS gives the heirarchy of naming
contexts, or directories, in reveresd DNS format. This is similar to the 
Java package naming convention, and so a server located withi the seismology
program at the University of South Carolina might have a serverDNS of
edu/sc/seis. Another common serverDNS would be for the IRIS DMC, which is
currently edu/iris/dmc.
</para>
<para>
The serverName is the name of the EventDC within the name service. The current
server at the DMC is named IRIS_EventDC. It is possible to have multiple 
servers within the same serverDNS with different names.
</para>
</sect1>
</sect1>
<title>Event Attributes</title>
<para>

</para>
</sect1>
</chapter>

</book>